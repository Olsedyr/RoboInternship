STATEMACHINEVERSION 3
Name=WorkCell
Link=Emergency
Link=ContinueKnap
Link=ErrorCode
Link=ConveyorsErrorCode
; Statemachines with output, that should be tested for ST_IDLE
; find them with 'grep -l "Output=" 8XX*.statemachine'
Link=ConveyorStation
Link=KasseStativ
Link=PalleStation
Link=PIDLift
Link=PindeTjekker600
linkValue=newprogram Program8XX
Value=errorCode 0
Value=firstRun 0
Timeout=timeBeforeRunning 3000000
Timeout=timeBeforePausing 2000000

State=ST_HALT
END

State=ST_IDLE
  TEST ContinueKnap = ST_HIGH
    TIMEOUT timeBeforeRunning ST_STARTING
    SETSTATE ST_STARTING
  ENDTEST
END

State=ST_STARTING
  SET firstRun 1
	TEST timeBeforeRunning = 1
		SETSTATE ST_RUNNING
	ENDTEST
	TEST Emergency = ST_POWEROFF
		SETSTATE ST_ERROR
	ENDTEST
END

State=ST_RESTARTING
  SET firstRun 0
	TEST timeBeforeRunning = 1
		SETSTATE ST_RUNNING
	ENDTEST
	TEST Emergency = ST_POWEROFF
		SETSTATE ST_ERROR
	ENDTEST
END

State=ST_RUNNING
  TEST ContinueKnap = ST_HIGH
    TIMEOUT timeBeforePausing ST_PAUSING
    SETSTATE ST_PAUSING
  ENDTEST
	TEST ErrorCode = ST_ERROR
  OR ConveyorsErrorCode = ST_ERROR
		TIMEOUT timeBeforePausing ST_PAUSING
    SETSTATE ST_PAUSING
	ENDTEST
	TEST Emergency = ST_POWEROFF
		SETSTATE ST_ERROR
	ENDTEST
END

State=ST_STOPPING
  SETSTATE ST_IDLE
	TEST Emergency = ST_POWEROFF
		SETSTATE ST_ERROR
	ENDTEST
END

State=ST_PAUSING
	; dont test for trafficlight :-)
	TEST timeBeforePausing = 1
  AND ConveyorStation = ST_IDLE
  AND KasseStativ = ST_IDLE
  AND PalleStation = ST_IDLE
  AND PIDLift = ST_IDLE
  AND PindeTjekker600 = ST_IDLE
    SETSTATE ST_PAUSED
	ENDTEST
	TEST Emergency = ST_POWEROFF
		SETSTATE ST_ERROR
	ENDTEST
END

State=ST_PAUSED
	TEST newprogram = 1
		SETSTATE ST_IDLE
	ELSE
		TEST ContinueKnap = ST_HIGH
			TIMEOUT timeBeforeRunning ST_RESTARTING
			SETSTATE ST_RESTARTING
		ENDTEST
	ENDTEST
END

State=ST_ERROR
  TEST ContinueKnap = ST_HIGH
		SET errorCode 0
    TIMEOUT timeBeforeRunning ST_STARTING
    SETSTATE ST_STARTING
  ENDTEST
END

State=ST_RESET
END

State=ST_TIMER
END
