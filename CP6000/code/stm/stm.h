void signalContinue(void);
void getWorkCellStr(char *workCell, char *programstr, char *workcellstr);
void getButtonState(char *WorkCell, char *Emergency, int *menuEn, int *runEn, int *stopEn);
int waitCond(volatile int *stopState, pthread_cond_t *cond, pthread_mutex_t *mutex, volatile int *state, int teststate);
char *getCurrentStateName(int machine);
int testState(int machine, int state);
int setState(int machine, int state);
int testMachineState(const char *machinename, const char *statename);
void setMachineState(const char *machinename, const char *statename);
int waitState(int machine, int state);
void setSTMTimer(struct timeval *stmtm, long val);
int getSTMTimer(struct timeval *stmtm);
int getStateMachineError(int number);
int getStateMachineMessage(void);
int clearStateMachineError(void);
int setStateMachinesIdle(void);
int stopStateMachines(void);
void startStateMachines(void);
int parseStateCmd(int idx);
int stmStop(void);
int stmStart(void);
void *stm_task(void *argument);
int isRunning(char *WorkCell);
void setupCW(void);
int thnRoundZero(int val);
void doCW(void);
int getline(char *instring, char *outstring, int lim);
int openSocket(char *remoteHost, int port);
void resetRequest(tmpnRemoteHost* remotehost);
void closeSocket(tmpnRemoteHost* remotehost);
int sendRequest(tmpnRemoteHost* remotehost);
int buildRequest(tmpnRemoteHost* remotehost,char *s, int lim);
int queryRemoteHost(tmpnWorkcell *workcell, tmpnRemoteHost *remotehost);
void *RemoteStatemachinesClient(void *arg);
int initRemoteStatemachines(tmpnWorkcell *workcell);
