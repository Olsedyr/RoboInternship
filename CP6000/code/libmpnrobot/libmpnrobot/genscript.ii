# 1 "genscript.c"
# 1 "/home/luz/Desktop/CP6000/code/libmpnrobot/libmpnrobot//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "genscript.c"




# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 313 "/usr/include/features.h" 3 4
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 314 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 378 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 379 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 236 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 237 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 32 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4
extern "C" {
# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();
# 224 "/usr/include/sys/types.h" 2 3 4




typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;
# 67 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;





    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 170 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw ();






extern int clearenv (void) throw ();
# 604 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 615 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 625 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 635 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 646 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 656 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 756 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 844 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 912 "/usr/include/stdlib.h" 3 4
}
# 6 "genscript.c" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 458 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 488 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 550 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 182 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 229 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 272 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 394 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 445 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 504 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 532 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 543 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 576 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 622 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 638 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 699 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 710 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 746 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 765 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 788 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 827 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 916 "/usr/include/stdio.h" 3 4
}
# 7 "genscript.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 92 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 164 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 208 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 338 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 380 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 436 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 485 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 513 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "/usr/include/string.h" 3 4
}
# 8 "genscript.c" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 175 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 176 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/environments.h" 2 3 4
# 180 "/usr/include/unistd.h" 2 3 4
# 199 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 200 "/usr/include/unistd.h" 2 3 4
# 240 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 260 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 303 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 314 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 345 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 401 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 413 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 437 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 479 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();






extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw ();




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));




extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

  };
# 569 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 605 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 631 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 648 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();






extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 851 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 852 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 937 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) throw ();




extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();




extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 974 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 984 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 994 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1004 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1025 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1048 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1058 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1079 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1117 "/usr/include/unistd.h" 3 4
}
# 9 "genscript.c" 2
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 26 "/usr/include/bits/mathdef.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/mathdef.h" 2 3 4
# 38 "/usr/include/bits/mathdef.h" 3 4
typedef long double float_t;

typedef long double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 141 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 142 "/usr/include/math.h" 2 3 4
# 157 "/usr/include/math.h" 3 4
extern int signgam;
# 198 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 284 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 307 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 465 "/usr/include/math.h" 3 4
}
# 10 "genscript.c" 2
# 1 "genscript.h" 1




# 1 "tmpnrobot.h" 1
# 9 "tmpnrobot.h"
# 1 "/usr/include/sys/time.h" 1 3 4
# 27 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4
extern "C" {
# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     throw () __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) throw ();
# 191 "/usr/include/sys/time.h" 3 4
}
# 10 "tmpnrobot.h" 2
# 1 "/usr/include/sys/times.h" 1 3 4
# 29 "/usr/include/sys/times.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/sys/times.h" 2 3 4


extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 11 "tmpnrobot.h" 2
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/time.h" 1 3 4
# 33 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/bits/sched.h" 1 3 4
# 71 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


}







struct __sched_param
  {
    int __sched_priority;
  };
# 113 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 196 "/usr/include/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 36 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 110 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 26 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 27 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/bits/sigset.h" 1 3 4
# 34 "/usr/include/signal.h" 2 3 4
# 408 "/usr/include/signal.h" 3 4
}
# 30 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4






typedef int __jmp_buf[6];
# 32 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 33 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 117 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 149 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 184 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 222 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 468 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 480 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 514 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 716 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
                                    __const struct timespec *__restrict
                                    __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 782 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 864 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 976 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
                                        __restrict __attr,
                                        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
                                        int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1020 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
                                           int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1087 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1121 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1135 "/usr/include/pthread.h" 3 4
}
# 12 "tmpnrobot.h" 2
# 183 "tmpnrobot.h"
enum tcpName{caseGripper
            ,bagGripper
            ,zeroGripper};
# 496 "tmpnrobot.h"
typedef struct comskConnect
{
 int fixdec;
 float factor;
 float fdata;
 int major;
 int minor;
 short* data;
 char key[256];
 char comment[256];
} comskConnect;

typedef struct comskstruct
{
  char module_name[256];
 int address;
  int numOfInitWords;
  int numOfInWords;
  int numOfOutWords;
 comskConnect initdata[40];
  comskConnect idata[10];
  comskConnect odata[10];
} comskstruct;

typedef struct tmpnComSK
{
  int sfd;
  int simulate;
 int type;
  char ipaddr[256];
  int numOfModules;
  comskstruct *iotab;
 int highadr;
 int lowadr;
 int adrcount;
 short oarray[10*10];
} tmpnComSK;

typedef struct tmpnComSKs
{
  char name[256];
  int maxidx;
  tmpnComSK comsk[5];
} tmpnComSKs;
# 557 "tmpnrobot.h"
typedef struct macConnect
{
 int type;
 float factor;
 int reg;
 int bitmode;
 void *bitparent;
 int data;
 float fdata;
 int userchange;
 char key[256];
 char comment[256];
} macConnect;

typedef struct macstruct
{
  char module_name[256];
 int address;
  int numOfInitWords;
  int numOfInWords;
  int numOfOutWords;
 macConnect initdata[50];
  macConnect idata[100];
  macConnect odata[50];
} macstruct;

typedef struct tmpnMac
{
 char filename[256];
  int sfd;
  int simulate;
  char ipaddr[256];
 int port;
  int numOfMotors;
  macstruct *iotab;
} tmpnMac;

typedef struct tmpnMacs
{
  char name[256];
  int maxidx;
  tmpnMac mac[4];
} tmpnMacs;


typedef struct loadcellConnect
{
 float factor;
 float fdata;
 int ignoreError;
 char key[256];
 char comment[256];
} loadcellConnect;

typedef struct tmpnLoadCell
{
  int sfd;
  int simulate;
  char ipaddr[256];
 int port;
 int fastmoxa;
  int numOfModules;
  loadcellConnect iotab[8];
} tmpnLoadCell;

typedef struct tmpnLoadCells
{
  char name[256];
  int maxidx;
  tmpnLoadCell loadcell[3];
} tmpnLoadCells;
# 644 "tmpnrobot.h"
typedef struct tmpnConnect
{
  int connectType;
  int wordidx;
  int bitidx;
  int shift;
  unsigned short mask;
  union
  {
    short *sdata;
    unsigned short *udata;
  };
  char name[256];
  char key[256];
  char text[256];
} tmpnConnect;

typedef struct stbstruct
{
  int type;
  char typeStr[256];
  char module_name[256];
  int maxidx;
  int numOfInWords;
  int numOfOutWords;
  tmpnConnect connect[30];
  unsigned short *idata;
  unsigned short *odata;
} stbstruct;

typedef struct tmpnDIO
{
  int sfd;
  volatile int cleardioerror;
  int simulate;
  char ipaddr[256];
  int numOfModules;
  stbstruct *iotab;
  int numOfInWords;
  unsigned short idata[1000];
  int numOfOutWords;
  unsigned short odata[1000];
} tmpnDIO;

typedef struct tmpnDIOs
{
  char name[256];
  int maxidx;
  tmpnDIO dio[5];
} tmpnDIOs;

typedef struct MPN_SUMMARY {
  float wdog;
  float emergency;
  float state;
  float mtypet;
  float mtypef;
  float axist;
  float axisa;
  float axisb;
  float axisc;
  float axisd;
  float axise;
  float axisf;
  float fea;
  float feb;
  float fec;
  float fed;
  float fee;
  float fef;
} MPN_SUMMARY;



typedef struct tmpnICPConnect
{
 int bitpos;
  char key[256];
 unsigned int *udata;
} tmpnICPConnect;

typedef struct icpconstruct
{
  int type;
  char typeStr[256];
  char module_name[256];
 int address;
 int dosetup;
  int numOfInBits;
  int numOfOutBits;
  tmpnICPConnect inconnect[16];
 tmpnICPConnect outconnect[16];
  unsigned int idata;
  unsigned int odata;
} icpconstruct;

typedef struct tmpnICPcon
{
  int sfd;
  int simulate;
  char ipaddr[256];
 int port;
  int numOfModules;
  icpconstruct *iotab;
} tmpnICPcon;

typedef struct tmpnICPcons
{
  int maxidx;
  tmpnICPcon icpcon[5];
} tmpnICPcons;

typedef struct AXIS_PARAMETER {
  float atype;
  float p_gain;
  float i_gain;
  float d_gain;
  float ov_gain;
  float vff_gain;
  float units;
  float speed;
  float accel;
  float decel;
  float creep;
  float jogspeed;
  float felimit;
  float dac;
  float servo;
  float redispt;
  float fwd_in;
  float rev_in;
  float dat_in;
  float fh_in;
  float fslimit;
  float rslimit;
  float mtype;
  float ntype;
  float mpos;
  float dpos;
  float fe;
  float axisstatus;
  float vpspeed;
} AXIS_PARAMETER;

typedef struct SCOPECMD
{
  float rtn;
  float arg[20];
  float cmd_nr;
  float type;
  float length;
  float numofsamples;
  float scale[6];
  float buffer[20];
} SCOPECMD;

typedef struct CONTROLLERCMD
{
  float rtn;
  float arg[10];
  float cmd_nr;
} CONTROLLERCMD;

typedef struct MPNCMD
{
  float rtn;
  float arg[10];
  float cmd_nr;
} MPNCMD;

typedef struct AXIS_NAME
{
  AXIS_PARAMETER t,a,b,c,d,e,f;
} AXIS_NAME;

typedef union AXIS_UNION
{
  AXIS_NAME name;
  AXIS_PARAMETER array[7];
} AXIS_UNION;

typedef struct TABLESPACE
{
  AXIS_UNION axis;
  SCOPECMD scope;
  CONTROLLERCMD ctrl_cmd;
  MPNCMD mpn_cmd;
  MPN_SUMMARY summary;
  float mpn_trio_basic_error;
  float mpn_trio_basic_line_error;
  float mpn_cancel;
  float mpn_running;
  float mpn_state;
  float num_of_path_index;
  float path_index[100];
} TABLESPACE;







typedef struct tmpnVectorXYZ
{
  float x,y,z;
} tmpnVectorXYZ;

typedef struct tmpnColor
{
 float r,g,b;
} tmpnColor;



typedef struct tmpnMaterial
{
  float diffuse[4];
  float ambient[4];
  float specular[4];
  float shininess;
} tmpnMaterial;
typedef struct tmpnBone
{
  long id;
  char name[80];
  tmpnVectorXYZ rot;
  tmpnVectorXYZ trans;
  tmpnVectorXYZ dim;
  tmpnColor color;
  tmpnMaterial material;
  int gllist;
  int cyl;
} tmpnBone;

typedef struct tmpnScene
{
  int coord;

  tmpnBone floor;
  tmpnBone foot,leg;
  tmpnBone gantry,shoulder;
  tmpnBone upperArm,lowerArm,lowerArm2,wrist,flange;
  tmpnBone gearA,gearB,gearC,gearD,gearE;


  tmpnBone tool;

  struct
  {
    int maxidx;
    tmpnBone accessory[10];
  } accessories;




  tmpnBone pallet;

  tmpnBone key;

  int boxpicked;
  int palletAboxPlaced[10][4];
  int palletCboxPlaced[10][4];
} tmpnScene;


typedef struct tmpnVector
{
  float x,y,z,v,w,u;
} tmpnVector;

typedef struct tmpnDualVector
{
  float x,y,z,v,w,u;
  int absx,absy,absz,absv,absw,absu;
} tmpnDualVector;

typedef struct tmpnFrame
{

  char name[256];
  float x,y,z,v,w,u;
} tmpnFrame;

typedef struct tmpnFrames
{
  int maxidx;
  tmpnFrame frame[30];
} tmpnFrames;

typedef struct tmpnTimingItem
{
  char name[256];
  float value;
} tmpnTimingItem;

typedef struct tmpnTiming
{
  int maxidx;
  tmpnTimingItem item[50];
} tmpnTiming;

typedef struct tmpnMacro
{
  char name[256];
  int idx;
} tmpnMacro;

typedef struct tmpnJoints
{
  float a,b,c,d,e,f;
} tmpnJoints;

typedef union tmpnJointsUnion
{
  tmpnJoints name;
  float array[6];
} tmpnJointsUnion;





typedef struct tmpnBoptParamStruct
{
# 979 "tmpnrobot.h"
 int numofparams;
 char table[16];
 float value;
 int ABS;
} tmpnBoptParamStruct;

typedef struct tmpnBoptViaVector
{
 tmpnBoptParamStruct x[16];
 tmpnBoptParamStruct y[16];
 tmpnBoptParamStruct z[16];
 tmpnBoptParamStruct v[16];
 tmpnBoptParamStruct w[16];
} tmpnBoptViaVector;

typedef struct tmpnBoptMacroItem
{
# 1009 "tmpnrobot.h"
 int integer[2];
 float floating[6];
} tmpnBoptMacroItem;

typedef struct tmpnBoptParamItem
{
# 1028 "tmpnrobot.h"
 int integer[2];
 float floating[6];
} tmpnBoptParamItem;

typedef struct tmpnBoptCoeffItem
{
 char pathName[256];
 int mode;
 int pathtype;
 int viatype;
  struct
  {
    char fromFrame[256];
    char toFrame[256];
    char fromItem[256];
    char toItem[256];
    char fromPattern[256];
    char toPattern[256];
  } def;
 tmpnBoptViaVector viapos[2];
 tmpnBoptViaVector viavel[2];
  tmpnBoptMacroItem macro[2];
 float mv[5];
 float ma[5];
 tmpnBoptParamItem params;
} tmpnBoptCoeffItem;

typedef struct tmpnBoptCoeff
{
  char name[128];
 char filename[256];
 int maxidx;
 tmpnBoptCoeffItem item[40];
} tmpnBoptCoeff;





typedef struct tmpnItem
{
  char type[256];
  char name[256];
  char filename[256];
  tmpnVectorXYZ dim;
  float sy;
  float gy;
  float my;
  float gx;
  float weight;
  int user;
} tmpnItem;

typedef struct tmpnPatternItem
{
  int layer;
  tmpnFrame wcp;
} tmpnPatternItem;

typedef struct tmpnPattern
{
  char name[256];
  char filename[256];
  int maxidx;
  float width;
  float length;
  tmpnPatternItem item[200];
} tmpnPattern;





typedef struct tmpnCPPatternItem
{
  int layer;
  int maxpush;
  int gettime;
  int *ppps;
  int *paccs;
  int *pspeeds;
} tmpnCPPatternItem;

typedef struct tmpnCPPattern
{
  char name[256];
  char filename[256];
  int user;
  int selectedItem;
  int selectedPPP;
  int maxidx;
  tmpnCPPatternItem *items;
} tmpnCPPattern;




typedef struct tmpnKeyPoint
{
  int tcpidx;
  int statehint;
  float positionhint;
  float x,y,z,v,w,u;
  float dt;
  float t;
  float sp;
} tmpnKeyPoint;

typedef struct tmpnHPoint
{
  int i;
  int time;
  float x,y,z,v,w,u;
  float dt;
  int tcpidx;
  int keypointidx;
} tmpnHPoint;

typedef struct tmpnPosHint
{
  int positionhint;
  int i;
  int time;
} tmpnPosHint;

typedef struct tmpnPosition {
   tmpnVector taskSpace;
   tmpnJointsUnion jointSpace;
   tmpnJointsUnion actuatorSpace;

   tmpnKeyPoint *keypoint;
   int tcpidx;
   int statehint;
   float positionhint;
   tmpnJointsUnion dif;
   tmpnJointsUnion speed;
   tmpnJointsUnion rev;
   tmpnJointsUnion pctRatedSpeed;
   tmpnJointsUnion posRad;
   tmpnJointsUnion speedRad;
   tmpnJointsUnion accelRad;
   tmpnJointsUnion jerkRad ;
   tmpnJointsUnion force;
   tmpnJointsUnion scope;
   int maxrev;
   float dt;
   float t;
   float sp;
} tmpnPosition;

typedef struct tmpnPathDef
{
  char name[256];
  int id;
  volatile int seqnum;
  volatile int idx;
  int maxidx;
  int numofsamples;
  int samplesBetweenKeypoints;
  int pathtype;
  int runbopt;
  int spline;
  int loadgroup;
  int splineorder;
  float maxTime;
  float maxSpeed;
  tmpnKeyPoint keypoint[500];
  int maxhidx;
  tmpnHPoint hpoint[20];
  int maxpidx;
  tmpnPosHint poshint[20];
} tmpnPathDef;

typedef struct tmpnPath
{
  int maxidx;
  tmpnPosition position[5000];
} tmpnPath;


typedef struct bufferstruct
{
  tmpnPathDef *tpathdef;
  tmpnPath pathdata;
} bufferstruct;
# 1228 "tmpnrobot.h"
typedef struct tmpnPathKeyFrame
{
  tmpnFrame frame;
  int cItem;
  int cLayer;
  char itemName[256];
  tmpnItem *item;
  char patternName[256];
  tmpnPattern *pattern;
} tmpnPathKeyFrame;

typedef struct tmpnPathKey
{
  int mode;
  int type;
 tmpnBoptCoeffItem* boptcoeff;
  tmpnPathKeyFrame from;
  tmpnPathKeyFrame to;
} tmpnPathKey;

typedef struct tmpnPathHandle
{
  tmpnPathKey key;
  int state;

  char script[256];
  struct COMMANDSTRUCT *firstpoint;
} tmpnPathHandle;

typedef struct tmpnPathItem
{
  tmpnPathHandle handle;
  tmpnPathDef pathdef;
  int bopted;
  tmpnPathHandle *path;
} tmpnPathItem;


typedef struct tmpnPathTable
{
  int maxidx;
  int newidx;
  tmpnPathItem item[500];
  int currentidx;
  tmpnPath pathdata;
} tmpnPathTable;

typedef struct tmpnScopeItem
{
  tmpnJointsUnion force;
} tmpnScopeItem;

typedef struct tmpnScope
{
  int maxidx;
  tmpnScopeItem *sample;
} tmpnScope;
typedef struct tmpnAccessory
{
  char name[256];
  tmpnVectorXYZ dimention;
  tmpnVectorXYZ transformation;
  tmpnMaterial material;
} tmpnAccessory;





typedef struct tmpnRemoteHost
{
  char name[128];
  int port;
  int sockfd;
  int alive;
  int repeat;
  int sndbuf_idx;
  char sndbuf[2048];
} tmpnRemoteHost;

typedef struct tmpnRemoteStateMachine
{
  tmpnRemoteHost *remotehost;
  char name[128];
  char state[128];
  char safe[128];
 pthread_mutex_t remotelock;
} tmpnRemoteStateMachine;

typedef struct tmpnRemoteValue
{
  tmpnRemoteHost *remotehost;
  char name[128];
  char link[128];
 int subtype;
 int data;
 float fdata;
} tmpnRemoteValue;

typedef struct tmpnMachineType
{
  int idx;
  char name[256];
} tmpnMachineType;

typedef struct tmpnStateName
{
  int idx;
  char name[256];
} tmpnStateName;

typedef struct tmpnStateMachineIO
{
  char name[256];
  int iotype;


 union {
  tmpnConnect *connect;
  comskConnect *comskconnect;
  loadcellConnect *loadcellconnect;
  macConnect *macconnect;
  tmpnICPConnect *icpconnect;
 };
} tmpnStateMachineIO;

typedef struct STMCOMMANDSTRUCT
{
  int type;
  void *data;
  int level;
} STMCOMMANDSTRUCT;

typedef struct tmpnStateMachineState
{
  char name[256];
  int statenum;
  int maxprgidx;
  STMCOMMANDSTRUCT *prg;
} tmpnStateMachineState;

typedef struct tmpnStateMachineTimeout
{
  char name[256];
  int timeout;
} tmpnStateMachineTimeout;

typedef struct tmpnStateMachineTable
{
  int maxsize;
  int filter;
  int newtablesize;
  int curtablesize;
  int sum;
  int sumcnt;
  int maxidx;
  int min;
  int max;
  int *item;
  int topsearchwidth;
  int topidx;
  float fsum;
  float fmin;
  float fmax;
  float *fitem;
  float topval;
} tmpnStateMachineTable;

typedef struct tmpnStateMachineValue
{
  char name[256];
  int type;
  int subtype;
  int data;
  float fdata;
  char linkname[256];
  char link[256];

  tmpnStateMachineTable *table;
  tmpnPathHandle *path;
  tmpnFrame *frame;
  tmpnItem *item;
  tmpnPattern *pattern;
  tmpnCPPattern *cppattern;
  struct tmpnStateMachineValue *linkvalue;
 tmpnRemoteValue *remote;
} tmpnStateMachineValue;

typedef struct tmpnStateMachineLink
{
  int stmidx;
  char localname[256];
  char name[256];
} tmpnStateMachineLink;

typedef struct tmpnStateMachine
{
  int version;
  int type;
  char filename[256];
  char name[256];


  int mcSignal;

  int delaystop;
  struct timeval stoptimer;

  volatile int istate;
  int next_istate;
  int new_istate;
  volatile int stop;
  pthread_cond_t change;
  pthread_mutex_t change_mtx;
  struct timeval timer;
 int timerstate;
 tmpnStateMachineValue *debugvalue;
  int numstate;
  tmpnStateMachineState *state;
 int numvalue;
  tmpnStateMachineValue *value;
  int numtimeout;
  tmpnStateMachineTimeout *timeout;
  int numinput;
  tmpnStateMachineIO *input;
  int numoutput;
  tmpnStateMachineIO *output;
  int numlink;
  tmpnStateMachineLink *link;
} tmpnStateMachine;




typedef struct tmpnUdpQuestionStruct
{
 float freq;
 char questionformat[256];
 char responseformat[256];
 int maxresponseval;
 tmpnStateMachineValue *responseval[10];
} tmpnUdpQuestionStruct;

typedef struct tmpnUdpAgentStruct
{
 int type;
 int simulate;
 char ipaddr[256];
  int port;
  int sockfd;
  int sndbuf_idx;
  char sndbuf[2048];
 int maxqlines;
 tmpnUdpQuestionStruct qlines[32];
} tmpnUdpAgentStruct;

typedef struct tmpnUdpAgents
{
  int servers_maxidx;
 int clients_maxidx;
  tmpnUdpAgentStruct *server;
  tmpnUdpAgentStruct *client;
} tmpnUdpAgents;




typedef struct tmpnPPScriptItem
{
  char cmd[256];
  char item[256];
  char from[256];
  char to[256];
  int layer;
  int idx;
  tmpnVector wcp;
} tmpnPPScriptItem;

typedef struct tmpnCoeff
{
  char name[256];
  float value;
} tmpnCoeff;

typedef struct tmpnPPScript
{
  char name[256];
  int type;

  int maxidx;
  int itemsPrLayer;
  int layers;
  tmpnPPScriptItem item[200];
} tmpnPPScript;

typedef struct tmpnRSSystem
{
  char plant[256];
  char workcell[256];
  char location[256];
  char robot[256];
  char pcIPaddr[256];
  char mcIPaddr[256];
  char nic[256];
  char script[256];
  int workcellid;
  int lag;
  struct
  {
    int initialized;
    int offx;
    int offy;
    float calx;
    float caly;
    int ctrltype;
    char port[256];
  } touch;
  char scriptname[256];
  int simulateMC;
  int mc_task_debug;
  int path_debug;
  int statemachine_debug;
 int io_debug;
  int startSpeed;
  char user[256];
  char password[256];
  int checkWeigher;
  int roboStacker;
  char mainDialog[256];
  int scriptExec;
  int new_trio_addr;
  int stmServerPort;
  int mc_version;
} tmpnRSSystem;



typedef struct tmpnTCP
{
  char name[256];
  float x,y,z,v,w,u;
} tmpnTCP;

typedef struct tmpnTool
{
  char name[256];
  tmpnVectorXYZ dim;
  float weight;
 int itemsperlift;



} tmpnTool;


typedef struct tmpnServoAxis {
} tmpnServoAxis;

typedef struct tmpnLink
{
  float length;
  float mass;
  float massDisplacement[3];
  float inertia[3][3];
} tmpnLink;

typedef struct tmpnStateTekst
{
  int idx;
  char tekst[256];
} tmpnStateTekst;

typedef struct tmpnStateTeksts
{
  char name[256];
  int maxidx;
  tmpnStateTekst item[1000];
} tmpnStateTeksts;

typedef struct tmpnStateTekstList
{
 int numofStateTeksts;
  tmpnStateTeksts stateteksts[6];
 int currentStateTekst;
} tmpnStateTekstList;

typedef struct tmpnLanguageLine
{
  int key;
  char tekst[256];
 char english[256];
} tmpnLanguageLine;

typedef struct tmpnLanguage
{
  char name[256];
  int maxidx;
  tmpnLanguageLine item[1000];
} tmpnLanguage;

typedef struct tmpnLanguages
{
 int numoflanguages;
  tmpnLanguage language[6];
 int currentLanguage;
} tmpnLanguages;

typedef struct tmpnScript
{
  char name[256];
} tmpnScript;

typedef struct tmpnScripts
{
  int maxidx;
  tmpnScript item[10];
} tmpnScripts;

typedef struct COMMANDSTRUCT {
  int type;
  void *data;
  struct COMMANDSTRUCT *next;
  struct COMMANDSTRUCT *prev;
  int flag;
  void *listitem;
  int include;
} COMMANDSTRUCT;

typedef struct tmpnRobot
{
  char m_name[256];
  float m_gantryLength;
  float m_legHeight;
  float m_shoulderGearB;
  tmpnLink m_Link[5];
  tmpnLink m_State[3];
  tmpnJointsUnion m_sign;
  tmpnJointsUnion m_ratedRpmGear;
  tmpnJointsUnion m_ratedNmGear;
  tmpnJointsUnion m_ratedRPM;
  tmpnJointsUnion m_ratedNm;
  tmpnJointsUnion m_maxForceNm;
  tmpnJointsUnion m_pulses;
  tmpnJointsUnion m_gearing;
  tmpnJointsUnion m_unit;

  tmpnJointsUnion m_units;
  tmpnJointsUnion m_p_gain;
  tmpnJointsUnion m_i_gain;
  tmpnJointsUnion m_d_gain;
  tmpnJointsUnion m_ov_gain;
  tmpnJointsUnion m_vff_gain;
  tmpnJointsUnion m_speed;
  tmpnJointsUnion m_accel;
  tmpnJointsUnion m_decel;
  tmpnJointsUnion m_creep;
  tmpnJointsUnion m_jogspeed;
  tmpnJointsUnion m_felimit;

  tmpnJointsUnion m_Trms;
  tmpnJointsUnion m_lifeTimeGear;

  tmpnVector m_min;
  tmpnVector m_max;

  tmpnVector m_worldPoint;

  tmpnVector m_localTrans;

  tmpnJoints m_jointCalib;

  tmpnJoints m_mpnhome;

  int m_state;
  int m_tcpidx;
  tmpnTCP m_tcp[3];

  tmpnJoints m_actuator;
  tmpnJoints m_joint;
  tmpnJointsUnion m_staticForce;

  tmpnFrames m_frames;
  int m_showPoint;
  int m_snapToGrid;
  int m_simulateTRIO;


  int splinehint;
  int splineorder;
  tmpnTiming timing;

} tmpnRobot;

typedef struct tmpnRobots
{
  int maxidx;
  tmpnRobot robot[1];
} tmpnRobots;

typedef struct tmpnPatterns
{
  int maxidx;
  tmpnPattern pattern[12];
} tmpnPatterns;

typedef struct tmpnCPPatterns
{
  int maxidx;
  tmpnCPPattern *cppattern;
} tmpnCPPatterns;

typedef struct tmpnItems
{
  int maxidx;
  tmpnItem item[10];
} tmpnItems;

typedef struct tmpnTools
{
  int maxidx;
  tmpnTool tool[3];
} tmpnTools;

typedef struct tmpnAccessories
{
  int maxidx;
  tmpnAccessory accessory[10];
} tmpnAccessories;

typedef struct tmpnPPScripts
{
  int maxidx;
  tmpnPPScript ppscript[10];
} tmpnPPScripts;

typedef struct tmpnStateMachines
{
  int maxidx;
  tmpnStateMachine *statemachine;
} tmpnStateMachines;

typedef struct tmpnRemoteStateMachines
{
  int maxidx;
  tmpnRemoteStateMachine remotestatemachine[100];
} tmpnRemoteStateMachines;

typedef struct tmpnRemoteValues
{
  int maxidx;
  tmpnRemoteValue remotevalue[100];
} tmpnRemoteValues;

typedef struct tmpnRemoteHosts
{
  int maxidx;
  tmpnRemoteHost remotehost[5];
} tmpnRemoteHosts;

typedef struct tmpnWorkcell
{
  char name[256];
 char filename[256];
 tmpnLanguages languages;
  tmpnRobots robots;
  tmpnPatterns patterns;
  tmpnCPPatterns cppatterns;
  tmpnTools tools;
  tmpnItems items;
  tmpnAccessories accessories;
  tmpnPPScripts ppscripts;
 tmpnBoptCoeff boptcoeff;
  tmpnStateMachines statemachines;
  tmpnRemoteStateMachines remotestatemachines;
  tmpnRemoteValues remotevalues;
  tmpnRemoteHosts remotehosts;
 tmpnUdpAgents udpagents;
  tmpnDIOs dios;
 tmpnComSKs comsks;
 tmpnLoadCells loadcells;
 tmpnMacs macs;
 tmpnICPcons icpcons;
  tmpnScripts scripts;
  tmpnStateTekstList statetekstlist;


  volatile COMMANDSTRUCT *m_root;






} tmpnWorkcell;

typedef struct tmpnWorkcells
{
  int maxidx;
  tmpnWorkcell workcell[2];
} tmpnWorkcells;

typedef struct tmpnPlant
{
  char name[256];
  tmpnWorkcells workcells;
} tmpnPlant;



typedef struct SPLINEHINTSTRUCT {
  int splinehint;
  int splineorder;
} SPLINEHINTSTRUCT;

typedef struct RESETPRELOADSTRUCT {
  int loadgroup;
} RESETPRELOADSTRUCT;

typedef struct ROOTSTRUCT {
  int dummy;
} ROOTSTRUCT;

typedef struct STATEHINTSTRUCT {
  int statehint;
} STATEHINTSTRUCT;

typedef struct POSITIONHINTSTRUCT {
  int positionhint;
} POSITIONHINTSTRUCT;

typedef struct SADSSTRUCT {
  float speed;
  float accel;
  float decel;
  int sramp;
} SADSSTRUCT;

typedef struct MOVEABSSTRUCT {
  float dest_a;
  float dest_b;
  float dest_c;
  float dest_d;
  float dest_e;
  float dest_f;
} MOVEABSSTRUCT;

typedef struct MOVEAXISSTRUCT {
  int axis;
  float speed;
  float accel;
  float decel;
  float distance;
  int wait;
} MOVEAXISSTRUCT;

typedef struct CANCELAXISSTRUCT {
  int axis;
  int wait;
} CANCELAXISSTRUCT;

typedef struct WSPSTRUCT {
  float x;
  float y;
  float z;
  float v;
  float w;
  float u;
} WSPSTRUCT;

extern WSPSTRUCT CalOffset;

typedef struct OUTPUTSTRUCT {
  int p;
  int state;
} OUTPUTSTRUCT;

typedef struct INPUTSTRUCT {
  int p;
} INPUTSTRUCT;

typedef struct EVENTSTRUCT {
  int type;
  char machineName[256];
  char stateName[256];
  char machine;
  char state;
} EVENTSTRUCT;

typedef struct COUNTERSTRUCT {
  char function[256];
  char name[256];
  char value[256];
} COUNTERSTRUCT;

typedef struct ERRORSTRUCT {
  int number;
  char text[256];
} ERRORSTRUCT;

typedef struct TUNINGSTRUCT {
  char name[256];
  int vr;
  float value;
} TUNINGSTRUCT;

typedef struct SETSPEEDSTRUCT {
  float factor;
} SETSPEEDSTRUCT;

typedef struct MACROSTRUCT {
  char name[256];
  int idx;
  int parameter0;
  int parameter1;
  int parameter2;
} MACROSTRUCT;

typedef struct CALLSTRUCT {
  char script[256];
  int lag;
} CALLSTRUCT;

typedef struct GOTOSTRUCT {
  char label[256];
} GOTOSTRUCT;

typedef struct LABELSTRUCT {
  char label[256];
} LABELSTRUCT;

typedef struct SLEEPSTRUCT {
  int ms;
} SLEEPSTRUCT;

typedef struct JUMPLAYERSTRUCT {
  char function[256];
  int layer;
} JUMPLAYERSTRUCT;

typedef struct SCOPESTRUCT {
  int parameter0;
  int parameter1;
  int parameter2;
} SCOPESTRUCT;

typedef struct CACHESTRUCT {
  char name[256];
  int idx;
} CACHESTRUCT;

typedef struct PPSCRIPTSTRUCT {
  char name[256];
  int idx,loadgroup;
} PPSCRIPTSTRUCT;

typedef struct PATHSTRUCT {
  tmpnPathDef tpathdef;
  struct COMMANDSTRUCT *firstpoint;
} PATHSTRUCT;

typedef struct POINTSTRUCT {
  tmpnKeyPoint fp;
  tmpnKeyPoint p;

  tmpnKeyPoint pp;
  int frameidx;
  PATHSTRUCT *path;
} POINTSTRUCT;

typedef struct SUBSTRUCT {
  char name[256];
} SUBSTRUCT;

typedef struct NAMESTRUCT {
  char name[256];
} NAMESTRUCT;

typedef struct ARGSTRUCT
{
  int type;
  int idx;
  int number;
  float fnumber;
  int subtype;
  char valstring[256];
  char valstring2[256];
} ARGSTRUCT;

typedef struct SETSTRUCT
{
  ARGSTRUCT dest;
  ARGSTRUCT src;
} SETSTRUCT;

typedef struct ROBOTSPEEDSTRUCT
{
  ARGSTRUCT src;
} ROBOTSPEEDSTRUCT;

typedef struct CALCSTRUCT
{
  ARGSTRUCT dest;
  ARGSTRUCT src1;
  int optype;
  ARGSTRUCT src2;
} CALCSTRUCT;

typedef struct PRINTSTRUCT
{
  ARGSTRUCT arg;
  int newline;
} PRINTSTRUCT;

typedef struct TESTSTRUCT
{
  ARGSTRUCT test;
  int validation;
  ARGSTRUCT cmp;
  int trueIdx;
  COMMANDSTRUCT *trueCmd;
  int falseIdx;
  COMMANDSTRUCT *falseCmd;
 int doneIdx;
} TESTSTRUCT;

typedef struct ELSESTRUCT
{
  int doneIdx;
  COMMANDSTRUCT *nextCmd;
} ELSESTRUCT;

typedef struct SETSTATESTRUCT
{
  char name[256];
  int number;
} SETSTATESTRUCT;

typedef struct SETFRAMESTRUCT
{
  tmpnFrame *destFrame;
  tmpnFrame *srcFrame;
  char dest[256];
  char src[256];
} SETFRAMESTRUCT;

typedef struct SETITEMTRUCT
{
  tmpnItem **destItem;
  tmpnItem *srcItem;
  char dest[256];
  char src[256];
} SETITEMSTRUCT;

typedef struct SETPATTERNSTRUCT
{
  tmpnPattern **destPattern;
  tmpnPattern *srcPattern;
  char dest[256];
  char src[256];
} SETPATTERNSTRUCT;

typedef struct SETCPPATTERNSTRUCT
{
  tmpnCPPattern **destCPPattern;
  tmpnCPPattern *srcCPPattern;
  char dest[256];
  char src[256];
} SETCPPATTERNSTRUCT;

typedef struct TIMEOUTSTRUCT
{
  int idx;
  int number;
  char statename[256];
} TIMEOUTSTRUCT;

typedef struct LOADSTRUCT
{
  tmpnPathHandle *path;
  tmpnFrame *fromFrame;
  tmpnFrame *toFrame;
  char dest[256];
  char src1[256];
  char src2[256];
} LOADSTRUCT;

typedef struct EXECSTRUCT
{
  tmpnPathHandle *path;
  char dest[256];
} EXECSTRUCT;

typedef struct MULSTRUCT
{
  int idx;
 int arg1idx;
  int arg2idx;
} MULSTRUCT;

typedef struct DIVSTRUCT
{
  int idx;
 int arg1idx;
  int arg2idx;
} DIVSTRUCT;

typedef struct ADDSTRUCT
{
  int idx;
 int arg1idx;
  int arg2idx;
} ADDSTRUCT;

typedef struct SUBTSTRUCT
{
  int idx;
 int arg1idx;
  int arg2idx;
} SUBTSTRUCT;

typedef struct ENDSTRUCT
{

} ENDSTRUCT;

typedef struct tmpnScopeData
{
  tmpnStateMachine *stm;
  ARGSTRUCT arg;
  tmpnStateMachineValue *sampling;
} tmpnScopeData;




extern "C" {

  int staticforce(tmpnRobot *robot);
  int tmpnComputeIK(tmpnRobot *trobot, float wx, float wy, float wz, float wv, float ww, float wu, int tcpidx);
  int tmpnJointToActuator(tmpnRobot *robot,int tcpidx);
  int tmpnComputeFK(tmpnRobot *trobot, float a, float b, float c, float d, float e, float f, int tcpidx);
  int tmpnComputeFKlogic(tmpnRobot *trobot, float a, float b, float c, float d, float e, float f, int tcpidx);
  void solve(tmpnRobot *robot, int maxidx, tmpnPosition *position, float maxTime, float *maxSpeed, int order);
  void generatePath(tmpnRobot *tmpnrobot, tmpnPathDef *pathdef, tmpnPath *path);
  void copyPath(tmpnPath *dest, tmpnPath *source);
  void hackPositionHint(tmpnPath *path, tmpnPathDef *pathdef);
  void copyKeypoint(tmpnPath *path, tmpnPathDef *pathdef);


}



extern "C" tmpnRobot *initrobot;
extern "C" volatile tmpnRobot *trobot;
extern "C" volatile tmpnWorkcell *tworkcell;
extern "C" tmpnPlant *tplant;
extern "C" int newtau;
extern "C" tmpnBoptCoeffItem coeff;
# 6 "genscript.h" 2

extern "C" {
# 35 "genscript.h"
typedef struct macroparamstruct
{
  int type;
  float amplitude;
  float offsx;
  float offsz;
  float length;
  float frequency;
  float time;
  int positionhint;
} macroparamstruct;


  void convert(tmpnVector *wp, int fromIdx, float x, float y, float z, float v, float w, float u, int toIdx, tmpnRobot *robot);
  COMMANDSTRUCT *split(COMMANDSTRUCT *ptrcmd, float x0, float y0, float z0, float v0, float w0, float u0
         ,float x1, float y1, float z1, float v1, float w1, float u1
         ,int nos, int *level, const char *framename, const char *tcpname);
  COMMANDSTRUCT *convertsplit(COMMANDSTRUCT *ptrcmd, float x0, float y0, float z0, float v0, float w0, float u0
         ,const char* fromFrame0, float x1, float y1, float z1, float v1, float w1, float u1
         ,const char* fromFrame1, tmpnRobot *robot, int nos, int *level, const char *toFrame, const char *tcpname, int endpoint);
  COMMANDSTRUCT *spiralMacro(tmpnRobot *robot, tmpnPathDef *ptrpath, int* curidx, float A, float offsx, float offsz, float L, float f, float T, tmpnVector* pos, int nos, int TCPidx);
  inline float spiralspeed(float L, float T);
  COMMANDSTRUCT *uplineMacro(tmpnRobot *robot, tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx);
  inline float uplinespeed(float L, float T);
  COMMANDSTRUCT *downlineMacro(tmpnRobot *robot, tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx);
  inline float downlinespeed(float L, float T);
  void blendquintic(tmpnPathDef *ptrpath, int* curidx, tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2, float ttime, int nos, int TCPidx, tmpnRobot *robot, int positionhint, int last);
  float blendquinticmaxvel(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2, float ttime, tmpnJointsUnion *mv);
  float blendquinticmaxacc(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2,float ttime,tmpnJointsUnion *ma);
  void blendcubic(tmpnPathDef *ptrpath, int* curidx, tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, int nos, int TCPidx, tmpnRobot *robot, int positionhint, int last);
  float blendcubicmaxacc(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, tmpnJointsUnion *ma);
  float blendcubicmaxvel(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, tmpnJointsUnion *mv);
  float trajopt(tmpnRobot *robot, tmpnPathDef *ptrpath, int pathidnum, int pathtype, int loadgroup, int trajectorytype, float samplerate, int fromTCPidx, int toTCPidx,tmpnJointsUnion* mv, tmpnJointsUnion* ma, tmpnVector* frompos, tmpnVector* fromvel, tmpnVector* topos, tmpnVector* tovel, tmpnDualVector* via1pos, tmpnVector* via1vel, tmpnDualVector* via2pos, tmpnVector* via2vel, macroparamstruct* startmacro, macroparamstruct* endmacro,int blendtype,float lockv);
 void jerkMinimizer(tmpnRobot *robot, tmpnPathDef *ptrpath, int tcpidx, int jerkscale);
  void expandBopt(tmpnRobot *robot, COMMANDSTRUCT* ptrcmd);
  void convertToFrame(tmpnVector *wp, int fromIdx, tmpnKeyPoint *p, int toIdx, tmpnRobot *robot);
  void convertToFrame_vectorstyle(tmpnVector *wp, tmpnFrame *fromF, tmpnVector *p, tmpnFrame *toF);
  void blendCorner3(tmpnRobot *robot, COMMANDSTRUCT *corner);
  void seekCorner(tmpnRobot *robot, COMMANDSTRUCT *corner, float rx, float rz);
  void seekCornerX(tmpnRobot *robot, COMMANDSTRUCT *corner, float rzminus, float rzplus, float rxminus, float rxplus);
  COMMANDSTRUCT *generateProgram(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, int layerHeightMM, int forceLayer, const char *ppscriptnameA);

  COMMANDSTRUCT *generateTomatProgram(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, const char *boxname, int dest, int numOfBoxes
          , const char *patternname);

  COMMANDSTRUCT *generateFlamingoProgram(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, const char *boxname, int dest, int numOfBoxes
      , const char *ppscriptnameA, const char *ppscriptnameB);

  COMMANDSTRUCT *generateProgramNS(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, int layerHeightMM, int forceLayer, const char *ppscriptnameA);
  COMMANDSTRUCT *expandPath304BoptHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath304Bopt(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup, int layerHeightMM);

  COMMANDSTRUCT *generateProgramAlfredIn(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, int forceLayer, int forceItem, const char *ppscriptname);
  COMMANDSTRUCT *generateProgramAlfredOut(COMMANDSTRUCT *ptrcmd, tmpnRobot *robot, int *level, int forceLayer, int forceItem, const char *ppscriptname);
  COMMANDSTRUCT *expandSubPathAlfredOut(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandSubPathAlfredIn(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPathAlfredBoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPathAlfredBoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPathAlfredBoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPathAlfredBoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandSubPathKatrineIn(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandSubPathKatrineOut(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath307BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath307BoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath307BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath307BoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath308BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath308BoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath308BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath308BoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath309BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath309BoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath309BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath309BoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath310BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath310BoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath310HybschABoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath310BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath310BoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath310HybschABoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath401BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath401BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);

  COMMANDSTRUCT *expandPath602BoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  COMMANDSTRUCT *expandPath602BoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath602BoptIn(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
  void expandPath602BoptOut(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup);
 COMMANDSTRUCT *expandPathGeneralBoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
 COMMANDSTRUCT *expandPathGeneralBoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);
 void expandPathBoptGeneral(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup, tmpnBoptCoeff* BoptCoeffs);
 int expandPathBoptGeneric(tmpnRobot *robot, tmpnPathDef *ptrpath, int cALayer, int cBLayer, int pathidx, tmpnFrame *fromFrame, tmpnFrame *toFrame, const char *startItem, const char *endItem, int loadgroup, int boptMode, int pathtype, tmpnBoptCoeff* BoptCoeffs);
 int expandBoptLoader(tmpnRobot *robot, tmpnPathItem *path);

}
# 11 "genscript.c" 2
# 1 "cmd.h" 1
# 17 "cmd.h"
extern "C" tmpnRSSystem rs_param;
extern "C" char rs_systempath[256];
extern "C" char rs_systemini[256];
extern "C" long defpathspeed;
extern "C" int defpathsamprate;
extern "C" TABLESPACE tspace;
extern "C" volatile int roboState;

extern "C" float speedFactor;
extern "C" volatile int ctrlNumOfUploads[1];
extern "C" volatile int jumpToLayer;
extern "C" volatile int scriptLoaded;
extern "C" pthread_cond_t script_cond;
extern "C" pthread_mutex_t script_mutex;
extern "C" pthread_cond_t upload_cond;
extern "C" pthread_mutex_t upload_mtx;
extern "C" pthread_cond_t uploaddone_cond;
extern "C" pthread_mutex_t uploaddone_mtx;
# 60 "cmd.h"
extern "C" {

extern int jointToTask(const char *filename);
extern int tmpnScopeLoad(const char *filename, tmpnPath *path);

extern int SaveCommandScript(COMMANDSTRUCT *root, const char *filename);
extern COMMANDSTRUCT *LoadCommandScript(const char *filename, int flag);
extern int AddProgram(int PrgStmIdx, char *newName, int copyfromidx);
extern int SaveProgramVal(int PrgStmIdx, STMCOMMANDSTRUCT *stmcmd, char *prgname);
extern int SaveTimeVal(const char *stmname, const char *timename,int val);
extern int SaveConstVal(const char *stmname, const char *constname,tmpnStateMachineValue* val);
extern int SaveItemVal(const char *stmname, const char *name, const char *itemName);
extern int SaveCPPatternVal(const char *stmname, const char *name, const char *cppName);
extern int SaveFrameVal(const char *stmname, tmpnFrame *newfr);
extern int SaveMacInitVal(tmpnMac* mac, int modidx, int initidx);
extern int tmpnRobotLoad(const char *filename, tmpnRobot *robot);
extern int tmpnRobotSave(const char *filename, tmpnRobot *robot);
extern void selectRobot(int i);

extern int tmpnPatternLoad(const char *filename, tmpnPattern *pattern);
extern int tmpnPatternSave(tmpnPattern *pattern);
extern tmpnPattern *getPattern(const char *name, tmpnWorkcell *workcell);
extern void getPatternString(char *s, int i, tmpnPattern *pattern);

extern int tmpnCPPatternLoad(const char *filename, tmpnCPPatterns *cppatterns);
extern int tmpnCPPatternSave(tmpnCPPattern *cppattern);
extern tmpnCPPattern *getCPPattern(const char *name, tmpnWorkcell *workcell);

extern tmpnPPScript *getPPScript(const char *name, tmpnWorkcell *workcell);

extern int tmpnBoptCoeffLoad(const char *filename, tmpnBoptCoeff *boptcoeff);
extern int tmpnBoptCoeffSave(tmpnBoptCoeff *boptcoeff);

extern tmpnBoptCoeff *getBoptCoeff(tmpnWorkcell *workcell);
extern tmpnBoptCoeffItem *getBoptCoeffItem(tmpnBoptCoeff *boptcoeff, int mode, int pathtype);

extern char *getLanguageLineFromIdx(tmpnLanguage *lang, int idx, char *defaultstring);
extern char *getLanguageLineFromKey(tmpnLanguage *lang, int key, char *defaultstring);
extern char *getLanguageLineFromEnglish(tmpnLanguage *lang, char *englishline, char *defaultstring);
extern int selectLanguage(tmpnLanguages *langs, char *languagename);
extern int tmpnItemLoad(const char *filename, tmpnItem *item);
extern int tmpnItemSave(tmpnItem *item);
extern tmpnItem *getItem(const char *name, tmpnWorkcell *workcell);

extern int tmpnToolLoad(const char *filename, tmpnTool *tool);
extern tmpnTool *getTool(const char *name, tmpnWorkcell *workcell);

extern int tmpnWorkcellLoad(const char *filename, tmpnWorkcell *workcell);
extern int tmpnWorkcellSave(const char *filename, tmpnWorkcell *workcell);
extern void selectWorkcell(int i);

extern int tmpnPlantLoad(const char *filename, tmpnPlant *plant);
extern int tmpnPlantSave(const char *filename, tmpnPlant *plant);

extern int tmpnStateMachineLoad(const char *filename, tmpnStateMachine *statemachine, int level);
extern int tmpnStateLoad(const char *filename, tmpnStateMachine *statemachine, int level);
extern void SetupSTMLink1(tmpnStateMachine *stm);
extern void SetupSTMLink2(tmpnStateMachine *stm);
extern int getArgInt(tmpnStateMachine * stm, ARGSTRUCT *arg);
extern void setArgInt(tmpnStateMachine * stm, ARGSTRUCT *arg, int value);
extern void printArg(tmpnStateMachine * stm, ARGSTRUCT *arg, int newline);

extern void copyAxisToRobotFile(tmpnRobot *robot);
extern void copyAxisToTableSpace(tmpnRobot *robot);

extern int LoadCalibrationParam(tmpnRSSystem *ini);
extern int SaveCalibrationParam(tmpnRSSystem *ini);
extern int LoadRSSystemData(tmpnRSSystem *ini);
extern int SaveRSSystemData(tmpnRSSystem *ini);

extern char *getMachineTypeName(int num);
extern int getMachineIdx(const char *machinename);
extern int getMachineStateIdx(const char *machinename, const char *statename);
extern int getStateIdx(int machine, const char *statename);
extern void deleteSTMPrg(tmpnStateMachine *statemachine);
extern void setStateTekst(char *tekst, int state, int line);
extern const char *tmpnGetDatabase(void);
extern void tmpnSetDatabase(const char *database);
extern int getRemoteStatemachineIdx(tmpnWorkcell *workcell,char *str);
extern int getRemoteValueIdx(tmpnWorkcell *workcell,char *str1,char *str2);
extern int getTCPidx(char *name, tmpnRobot *trobot);
extern int getFrameIdx(const char *name, tmpnRobot *robot);
extern int getRobotIdx(const char *name, tmpnWorkcell *workcell);
extern int getWorkcellIdx(const char *name, tmpnPlant *plant);

extern float getTimingValue(const char *name, tmpnRobot *robot);
extern int connectSimulated(tmpnConnect *connect);

extern void getCommandString(char *t, COMMANDSTRUCT *cmd);
extern COMMANDSTRUCT *addCommandString(COMMANDSTRUCT *ptrcmd, const char *t, int* level);
extern void deleteCommand(COMMANDSTRUCT *cmd);
extern void refreshPoint(COMMANDSTRUCT *cmd);
extern void adjPoint(COMMANDSTRUCT *cmd
        ,float wx, float wy, float wz, float wv, float ww, float wu, float wt, int tcpidx);

extern void refreshPath(COMMANDSTRUCT *cmd);
extern void adjPath(PATHSTRUCT *path);
extern void updatecmdPoints(COMMANDSTRUCT *cmd);
extern char *getProgramName(char *stmname);


extern tmpnStateMachineValue *getMachineValue(int machine, char *valuename);
extern int getMachineVersion(int machine);
extern tmpnFrame *getStmFrame(char *framename);
extern int *getMachineValuePtr(int machine, char *valuename);
extern unsigned short *getMachineInputPtr(int machine, char *inputname);

tmpnConnect *getConnectPtr(stbstruct *stb,char *name);
unsigned short getConnectValue(tmpnConnect *connect);
int getConnectValueInt(tmpnConnect *connect);
short getConnectValueSigned(tmpnConnect *connect);
void setConnectValue(tmpnConnect *connect, unsigned short value);
void setConnectValueInt(tmpnConnect *connect, int value);
void setConnectValueSigned(tmpnConnect *connect, short value);
macConnect *getMacConnectPtr(tmpnStateMachine *stm, char *name);

extern float getArgFloat(tmpnStateMachine * stm, ARGSTRUCT *arg);
extern void setArgFloat(tmpnStateMachine * stm, ARGSTRUCT *arg, float value);


extern void selectRunCommand(COMMANDSTRUCT *runcmd);
extern COMMANDSTRUCT *getRunCommand(void);
extern COMMANDSTRUCT *getNextRunCommand(COMMANDSTRUCT *pcmd);
extern COMMANDSTRUCT *getNextRunCommandAtSameLevel(COMMANDSTRUCT *pcmd);
extern COMMANDSTRUCT *getPrevRunCommand(COMMANDSTRUCT *pcmd);
extern COMMANDSTRUCT *getFirstRunCommand(COMMANDSTRUCT *root);
extern COMMANDSTRUCT *getFirstCommand( COMMANDSTRUCT *root);
extern COMMANDSTRUCT *getLastRunCommand( COMMANDSTRUCT *root);
extern COMMANDSTRUCT *AddCommand(int type);
extern COMMANDSTRUCT *InsertCommand(COMMANDSTRUCT *ptrcmd, int type);
extern POINTSTRUCT *getPoint(COMMANDSTRUCT *pcmd, int off);
extern COMMANDSTRUCT *getPrevPPScriptCommand(COMMANDSTRUCT *pcmd);

extern int GetActualNumber(void);
extern int FindNextCommand(void);
extern int FindPrevCommand(void);
extern int FindFirstCommand(void);
extern int FindLastCommand(void);
extern int GetCurrentCommandType(void);
extern COMMANDSTRUCT *GetCommandNumber(int idx);
extern COMMANDSTRUCT *selectCommand(COMMANDSTRUCT *cmd);
extern COMMANDSTRUCT *getParentCommand(COMMANDSTRUCT *cmd);
extern COMMANDSTRUCT *getPreviusCommand(COMMANDSTRUCT *cmd);
extern COUNTERSTRUCT *getCounter(char *name);
extern COUNTERSTRUCT *initCounter(char *name, char *value);
extern COUNTERSTRUCT *incCounter(char *name, char *value);
extern COUNTERSTRUCT *decCounter(char *name, char *value);
extern COUNTERSTRUCT *mulCounter(char *name, char *value);
extern COUNTERSTRUCT *divCounter(char *name, char *value);
extern char *getCounterValue(char* value);
extern COMMANDSTRUCT *FindNextCmdToUpload(COMMANDSTRUCT *cmd);
extern COMMANDSTRUCT *findNextToPreload(COMMANDSTRUCT *cmd);
extern COMMANDSTRUCT *FindLayerCmd(COMMANDSTRUCT *pcmd, int layer);

extern COMMANDSTRUCT *expandPath(COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup);

extern void RemoveAllCommands(COMMANDSTRUCT **root);
extern void ResetCmdLoadBuffer(COMMANDSTRUCT *root, int loadgroup);
extern COMMANDSTRUCT *FindFirstCmdToUpload(COMMANDSTRUCT *root);
extern int countPreload(COMMANDSTRUCT *root, int loadgroup);
extern COMMANDSTRUCT *getLabelCommand(COMMANDSTRUCT *root, const char *label);
extern COMMANDSTRUCT *findFirstPreloaded( COMMANDSTRUCT *root, int loadgroup);
extern COMMANDSTRUCT *findFirstPathInGroup(COMMANDSTRUCT *root, int loadgroup);
extern COMMANDSTRUCT *findItemPathInGroup( COMMANDSTRUCT *root, int loadgroup);
extern int libRunCounter(COMMANDSTRUCT *cmd, COMMANDSTRUCT **pcmd);

extern char *getStateString(int idx);
int saveScopeSample(char *file, char *s);
extern int getCmpType(tmpnStateMachine *stm, char *s, int ln);
extern void getArgBody(tmpnStateMachine * stm, ARGSTRUCT *data, char arg[]);
extern float getArgValueFloat(tmpnStateMachineValue *val, char *val2, int *argSubType);
extern int getArgValueInt(tmpnStateMachineValue *val, char *val2, int *argSubType);
extern void setArgValueFloat(tmpnStateMachineValue *val, char *val2, float v);
extern void setArgValueInt(tmpnStateMachineValue *val, char *val2, int v);
extern int getArgSubType(tmpnStateMachine * stm, ARGSTRUCT *arg);
extern int findTopInTable(tmpnStateMachineValue *value);
extern void copyFramesFromSTMtoRobot(void);

}
# 12 "genscript.c" 2
# 1 "bopt.h" 1
# 18 "bopt.h"
typedef struct point
{
  double x;
  double y;
} point;

typedef struct tmpnJointsD
{
  double a,b,c,d,e;
} tmpnJointsD;

typedef union tmpnJointsDUnion
{
  tmpnJointsD name;
  double array[5];
} tmpnJointsDUnion;


typedef struct baneConf
{
  tmpnJointsDUnion pos[5];
  tmpnJointsDUnion vel[5];
} baneConf;

typedef struct koeffs
{
  tmpnJointsDUnion a0[4];
  tmpnJointsDUnion a1[4];
  tmpnJointsDUnion a2[4];
  tmpnJointsDUnion a3[4];
} koeffs;

class bane
{
 private:
  baneConf controlpoints;
  tmpnJointsDUnion maxvels;
  tmpnJointsDUnion maxaccs;
  double alpha[5];
  double alphatot;
  koeffs kf;
  void cubickoeffs(const baneConf& c, koeffs& k, int i);
  double findalpha(const baneConf& c, int i);
  double findgradient(const baneConf& Q, double grad[],int i);
  void gradientMetode();
 public:
  bane(const tmpnJointsDUnion startpunkt,const tmpnJointsDUnion starthast,const tmpnJointsDUnion slutpunkt,const tmpnJointsDUnion sluthast,tmpnJointsDUnion mv,tmpnJointsDUnion ma);
  void init(const tmpnJointsDUnion startpunkt,const tmpnJointsDUnion starthast,const tmpnJointsDUnion slutpunkt,const tmpnJointsDUnion sluthast,tmpnJointsDUnion mv,tmpnJointsDUnion ma);
  void setLimits(tmpnJointsDUnion mv,tmpnJointsDUnion ma);
  void optimer();
  void getResult(baneConf& Q,double& alfa);
  double cubicpoly(const int joint,const double t);
  double dcubicpoly(const int joint,const double t);
  double ddcubicpoly(const int joint,const double t);
};
# 13 "genscript.c" 2

int layerHeightMM=0;
tmpnBoptCoeffItem coeff;

void convert(tmpnVector *wp, int fromIdx
            ,float x, float y, float z, float v, float w, float u
            ,int toIdx, tmpnRobot *robot)
{
  wp->x = x+robot->m_frames.frame[fromIdx].x-robot->m_frames.frame[toIdx].x;
  wp->y = y+robot->m_frames.frame[fromIdx].y-robot->m_frames.frame[toIdx].y;
  wp->z = z+robot->m_frames.frame[fromIdx].z-robot->m_frames.frame[toIdx].z;
  wp->v = v+robot->m_frames.frame[fromIdx].v-robot->m_frames.frame[toIdx].v;
  wp->w = w+robot->m_frames.frame[fromIdx].w-robot->m_frames.frame[toIdx].w;
  wp->u = u+robot->m_frames.frame[fromIdx].u-robot->m_frames.frame[toIdx].u;
}


COMMANDSTRUCT *split(COMMANDSTRUCT *ptrcmd, float x0, float y0, float z0, float v0, float w0, float u0
          ,float x1, float y1, float z1, float v1, float w1, float u1
          ,int nos, int *level, const char *framename, const char *tcpname)
{
  int i,l,lnos;
  char s[256];
  float xp,yp,zp,vp,wp,up,t,stepsize;
  t=0.0;
  if(nos<=-1)
  {
    l=(int)sqrt((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0)+(z1-z0)*(z1-z0)+(v1-v0)*(v1-v0)+(w1-w0)*(w1-w0)+(u1-u0)*(u1-u0));
    lnos=(int)(l/100.501)+1;
    if(lnos<-nos) nos=-nos; else nos=lnos;
    if(nos<1) return __null;
    stepsize=1.0/(float)(nos+1);
    for(i=0;i<nos;i++)
    {
      t+=stepsize;
      xp=x0+(x1-x0)*t;
      yp=y0+(y1-y0)*t;
      zp=z0+(z1-z0)*t;
      vp=v0+(v1-v0)*t;
      wp=w0+(w1-w0)*t;
      up=u0+(u1-u0)*t;
      sprintf(s,"POINT %s %3.2f,%3.2f,%3.2f,%3.2f,%3.2f,%3.2f,10.0 %s",framename,xp,yp,zp,vp,wp,up,tcpname);
      ptrcmd=addCommandString(ptrcmd,s,level);
    }
  }
  else if(nos>0)
  {
    stepsize=1.0/(float)(nos-1);
    for(i=1;i<nos;i++)
    {
      t+=stepsize;
      xp=x0+(x1-x0)*t;
      yp=y0+(y1-y0)*t;
      zp=z0+(z1-z0)*t;
      vp=v0+(v1-v0)*t;
      wp=w0+(w1-w0)*t;
      up=u0+(u1-u0)*t;
      sprintf(s,"POINT %s %3.2f,%3.2f,%3.2f,%3.2f,%3.2f,%3.2f,10.0 %s",framename,xp,yp,zp,vp,wp,up,tcpname);
      ptrcmd=addCommandString(ptrcmd,s,level);
    }
  }
  return ptrcmd;
}

COMMANDSTRUCT *convertsplit(COMMANDSTRUCT *ptrcmd, float x0, float y0, float z0, float v0, float w0, float u0
                                  ,const char* fromFrame0, float x1, float y1, float z1, float v1, float w1, float u1
                                  ,const char* fromFrame1, tmpnRobot *robot, int nos, int *level, const char *toFrame, const char *tcpname, int endpoint)
{
  tmpnVector wp0,wp1;
  char s[256];

  convert(&wp0,getFrameIdx(fromFrame0,robot),x0,y0,z0,v0,w0,u0,getFrameIdx(toFrame,robot),robot);
  convert(&wp1,getFrameIdx(fromFrame1,robot),x1,y1,z1,v1,w1,u1,getFrameIdx(toFrame,robot),robot);
  ptrcmd=split(ptrcmd,wp0.x,wp0.y,wp0.z,wp0.v,wp0.w,wp0.u
               ,wp1.x,wp1.y,wp1.z,wp1.v,wp1.w,wp1.u
               ,nos,level,toFrame,tcpname);
  if(endpoint)
  {
    sprintf(s,"POINT %s %3.2f,%3.2f,%3.2f,%3.2f,%3.2f,%3.2f,10.0 %s"
        ,toFrame
        ,wp1.x
        ,wp1.y
        ,wp1.z
        ,wp1.v
        ,wp1.w
        ,wp1.u
        ,tcpname);
    ptrcmd=addCommandString(ptrcmd,s,level);
  }
  return ptrcmd;
}
# 124 "genscript.c"
void spiralMacro(tmpnRobot *robot,tmpnPathDef *ptrpath,int* curidx, float A, float offsx, float offsz, float L, float f, float T, tmpnVector* pos, int nos, int TCPidx,int positionhint)
{
  tmpnVector out;
  for (int i=0;i<nos+1;i++) {
    float t=i*T/(1.0*nos);
    float x=t/T;
    out.x=pos->x+((20/3.0)*(x-1)*(x-1)*x)*A*sin(2*3.1415926535898*f*t) + offsx*10.65*((1.5*(x)*(x) - 3*x*x*x + 1.5*x*x*x*x));
    out.y=pos->y-(3/2.0)*(x-(1/3.0)*x*x*x)*L;
    out.z=pos->z+((-20/3.0)*(x-1)*x*x)*A*sin(2*3.1415926535898*f*t+3.1415926535898) + offsz*10.65*((1.5*(x)*(x) - 3*x*x*x + 1.5*x*x*x*x));
    out.v=pos->v;
    out.w=pos->w;
    out.u=pos->u;
    ptrpath->keypoint[*curidx].x=out.x;
    ptrpath->keypoint[*curidx].y=out.y;
    ptrpath->keypoint[*curidx].z=out.z;
    ptrpath->keypoint[*curidx].v=out.v;
    ptrpath->keypoint[*curidx].w=out.w;
    ptrpath->keypoint[*curidx].u=out.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

inline float spiralspeed(float L, float T)
{
  return -((3*L)/(2*T));
}
# 170 "genscript.c"
void uplineMacro(tmpnRobot *robot,tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx,int positionhint)
{
  tmpnVector out;
  for (int i=0;i<nos;i++) {
    float t=i*T/(1.0*nos);
    float x=1-t/T;
    out.x=pos->x;
  out.y=pos->y-(3/2.0)*(x-(1/3.0)*x*x*x)*L;
    out.z=pos->z;
    out.v=pos->v;
    out.w=pos->w;
    out.u=pos->u;
    ptrpath->keypoint[*curidx].x=out.x;
    ptrpath->keypoint[*curidx].y=out.y;
    ptrpath->keypoint[*curidx].z=out.z;
    ptrpath->keypoint[*curidx].v=out.v;
    ptrpath->keypoint[*curidx].w=out.w;
    ptrpath->keypoint[*curidx].u=out.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

inline float uplinespeed(float L, float T)
{
  return ((3*L)/(2*T));
}

void fastUplineMacro(tmpnRobot *robot,tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx,int positionhint)
{
  tmpnVector out;
 float A=2*L/(T*T);
  for (int i=0;i<nos;i++) {
    float t=i*T/(1.0*nos);
    out.x=pos->x;
    out.y=pos->y-L+0.5*A*t*t;
    out.z=pos->z;
    out.v=pos->v;
    out.w=pos->w;
    out.u=pos->u;
    ptrpath->keypoint[*curidx].x=out.x;
    ptrpath->keypoint[*curidx].y=out.y;
    ptrpath->keypoint[*curidx].z=out.z;
    ptrpath->keypoint[*curidx].v=out.v;
    ptrpath->keypoint[*curidx].w=out.w;
    ptrpath->keypoint[*curidx].u=out.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

inline float fastuplinespeed(float L, float T)
{
 return 2*L/T;
}
# 246 "genscript.c"
void downlineMacro(tmpnRobot *robot,tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx, int positionhint)
{
  tmpnVector out;
  for (int i=0;i<nos+1;i++) {
    float t=i*T/(1.0*nos);
    float x=t/T;
    out.x=pos->x;
    out.y=pos->y-(3/2.0)*(x-(1/3.0)*x*x*x)*L;
    out.z=pos->z;
    out.v=pos->v;
    out.w=pos->w;
    out.u=pos->u;
    ptrpath->keypoint[*curidx].x=out.x;
    ptrpath->keypoint[*curidx].y=out.y;
    ptrpath->keypoint[*curidx].z=out.z;
    ptrpath->keypoint[*curidx].v=out.v;
    ptrpath->keypoint[*curidx].w=out.w;
    ptrpath->keypoint[*curidx].u=out.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

inline float downlinespeed(float L, float T)
{
  return (-(3*L)/(2*T));
}

void fastDownlineMacro(tmpnRobot *robot,tmpnPathDef *ptrpath, int* curidx, float L, float T, tmpnVector* pos, int nos, int TCPidx, int positionhint)
{
  tmpnVector out;
 float A=2*L/(T*T);
  for (int i=0;i<nos+1;i++) {
    float t=i*T/(1.0*nos);
  float x=T-t;
    out.x=pos->x;
  out.y=pos->y-L+0.5*A*x*x;
    out.z=pos->z;
    out.v=pos->v;
    out.w=pos->w;
    out.u=pos->u;
    ptrpath->keypoint[*curidx].x=out.x;
    ptrpath->keypoint[*curidx].y=out.y;
    ptrpath->keypoint[*curidx].z=out.z;
    ptrpath->keypoint[*curidx].v=out.v;
    ptrpath->keypoint[*curidx].w=out.w;
    ptrpath->keypoint[*curidx].u=out.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

inline float fastdownlinespeed(float L, float T)
{
 return -2*L/T;
}





void blendquintic(tmpnPathDef *ptrpath, int* curidx, tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2, float ttime, int nos, int TCPidx, tmpnRobot *robot, int positionhint, int last)
{
  int i,j;
  tmpnJointsUnion c[6];
  tmpnJointsUnion bl;
  for (j=0;j<5;j++) {
    c[0].array[j]=p1->array[j];
    c[1].array[j]=v1->array[j];
    c[2].array[j]=a1->array[j]*0.5;
    c[3].array[j]=(-20*p1->array[j]+20*p2->array[j]+ttime*(-12*v1->array[j]-8*v2->array[j]-3*ttime*a1->array[j]+ttime*a2->array[j]))/(2*pow(ttime,3));
    c[4].array[j]=(30*p1->array[j]-30*p2->array[j]+ttime*(16*v1->array[j]+14*v2->array[j]+3*ttime*a1->array[j]-2*ttime*a2->array[j]))/(2*pow(ttime,4));
    c[5].array[j]=-(12*p1->array[j]-12*p2->array[j]+ttime*(6*(v1->array[j]+v2->array[j])+ttime*(a1->array[j]-a2->array[j])))/(2*pow(ttime,5));
  }
  for (i=0;i<nos+1;i++) {
    float st=ttime*(i)/(float)(nos);
    if (i==nos) {
      if (!last) break;
    }
    for (j=0;j<5;j++) {
      bl.array[j]=c[5].array[j]*pow(st,5)+c[4].array[j]*pow(st,4)+c[3].array[j]*pow(st,3)+c[2].array[j]*pow(st,2)+c[1].array[j]*st+c[0].array[j];
    }
    tmpnComputeFKlogic(robot, bl.name.a, bl.name.b, bl.name.c, bl.name.d, bl.name.e, 0.0, TCPidx);
    ptrpath->keypoint[*curidx].x=robot->m_worldPoint.x;
    ptrpath->keypoint[*curidx].y=robot->m_worldPoint.y;
    ptrpath->keypoint[*curidx].z=robot->m_worldPoint.z;
    ptrpath->keypoint[*curidx].v=robot->m_worldPoint.v;
    ptrpath->keypoint[*curidx].w=robot->m_worldPoint.w;
    ptrpath->keypoint[*curidx].u=robot->m_worldPoint.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}

float blendquinticmaxvel(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2, float ttime, tmpnJointsUnion *mv)
{
  int i,j;
  int nos=100;
  tmpnJointsUnion c[5];
  tmpnJointsUnion bl;
  tmpnJointsUnion blmax={{0,0,0,0,0}};
  for (j=0;j<5;j++) {
    c[0].array[j]=v1->array[j];
    c[1].array[j]=a1->array[j];
    c[2].array[j]=3*(-20*p1->array[j]+20*p2->array[j]+ttime*(-12*v1->array[j]-8*v2->array[j]-3*ttime*a1->array[j]+ttime*a2->array[j]))/(2*pow(ttime,3));
    c[3].array[j]=2*(30*p1->array[j]-30*p2->array[j]+ttime*(16*v1->array[j]+14*v2->array[j]+3*ttime*a1->array[j]-2*ttime*a2->array[j]))/(pow(ttime,4));
    c[4].array[j]=-5*(12*p1->array[j]-12*p2->array[j]+ttime*(6*(v1->array[j]+v2->array[j])+ttime*(a1->array[j]-a2->array[j])))/(2*pow(ttime,5));
  }
  for (i=0;i<nos+1;i++) {
    float st=ttime*i/(float)(nos);
    for (j=0;j<5;j++) {
      bl.array[j]=fabs(c[4].array[j]*pow(st,4)+c[3].array[j]*pow(st,3)+c[2].array[j]*pow(st,2)+c[1].array[j]*st+c[0].array[j]);
      if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
    }
  }
  float scale=0;
  for (j=0;j<5;j++) {
    bl.array[j]=blmax.array[j]/mv->array[j];
    if (bl.array[j]>scale) scale=bl.array[j];
  }
  return scale;
}

float blendquinticmaxacc(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* a1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, tmpnJointsUnion* a2,float ttime,tmpnJointsUnion *ma)
{
  int i,j;
  int nos=60;
  int finenos=60;
  tmpnJointsUnion c[4];
  tmpnJointsUnion bl;
  tmpnJointsUnion blmax={{0,0,0,0,0}};

  tmpnJointsUnion timemax={{0,0,0,0,0}};
  for (j=0;j<5;j++) {
    c[0].array[j]=a1->array[j];
    c[1].array[j]=3*(-20*p1->array[j]+20*p2->array[j]+ttime*(-12*v1->array[j]-8*v2->array[j]-3*ttime*a1->array[j]+ttime*a2->array[j]))/(pow(ttime,3));
    c[2].array[j]=6*(30*p1->array[j]-30*p2->array[j]+ttime*(16*v1->array[j]+14*v2->array[j]+3*ttime*a1->array[j]-2*ttime*a2->array[j]))/(pow(ttime,4));
    c[3].array[j]=-10*(12*p1->array[j]-12*p2->array[j]+ttime*(6*(v1->array[j]+v2->array[j])+ttime*(a1->array[j]-a2->array[j])))/(pow(ttime,5));
  }
  float tick=ttime/(float)nos;
  for (i=0;i<nos+1;i++) {
    float st=i*tick;
    for (j=0;j<5;j++) {
      bl.array[j]=fabs(c[3].array[j]*st*st*st+c[2].array[j]*st*st+c[1].array[j]*st+c[0].array[j]);
      if (bl.array[j]>blmax.array[j]) {
 blmax.array[j]=bl.array[j];
 timemax.array[j]=st;
      }
    }
  }
  for (j=0;j<5;j++) {


    if (((timemax.array[j]-tick)>0.0)&&((timemax.array[j]+tick)<ttime)) {
      for (i=0;i<finenos+1;i++) {
 float st=(timemax.array[j]-tick) + 2*tick*i/((float)finenos);
 bl.array[j]=fabs(c[3].array[j]*st*st*st+c[2].array[j]*st*st+c[1].array[j]*st+c[0].array[j]);
 if (bl.array[j]>blmax.array[j]) {
   blmax.array[j]=bl.array[j];
 }
      }
    }




  }
  float scale=0;
  for (j=0;j<5;j++) {

    bl.array[j]=blmax.array[j]/ma->array[j];
    if (bl.array[j]>scale) scale=bl.array[j];
  }
  return scale;
}







void blendcubic(tmpnPathDef *ptrpath, int* curidx, tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, int nos, int TCPidx, tmpnRobot *robot,int positionhint, int last)
{
  int i,j;
  tmpnJointsUnion c[4];
  tmpnJointsUnion bl;
  for (j=0;j<5;j++) {
    c[0].array[j]=p1->array[j];
    c[1].array[j]=v1->array[j];
    c[2].array[j]=-1.0*(3*p1->array[j]-3*p2->array[j]+2*v1->array[j]*ttime+v2->array[j]*ttime)/(ttime*ttime);
    c[3].array[j]=-1.0*(-v1->array[j]*ttime-v2->array[j]*ttime-2*p1->array[j]+2*p2->array[j])/(ttime*ttime*ttime);
  }
  for (i=0;i<nos+1;i++) {
    float st=ttime*(i)/(float)(nos);
  float st2,st3;
    if (i==nos) {
      if (!last) break;
    }
  st2=st*st;
  st3=st2*st;
    for (j=0;j<5;j++) {
      bl.array[j]=c[3].array[j]*st3+c[2].array[j]*st2+c[1].array[j]*st+c[0].array[j];
    }
    tmpnComputeFKlogic(robot, bl.name.a, bl.name.b, bl.name.c, bl.name.d, bl.name.e, 0.0, TCPidx);
    ptrpath->keypoint[*curidx].x=robot->m_worldPoint.x;
    ptrpath->keypoint[*curidx].y=robot->m_worldPoint.y;
    ptrpath->keypoint[*curidx].z=robot->m_worldPoint.z;
    ptrpath->keypoint[*curidx].v=robot->m_worldPoint.v;
    ptrpath->keypoint[*curidx].w=robot->m_worldPoint.w;
    ptrpath->keypoint[*curidx].u=robot->m_worldPoint.u;
    ptrpath->keypoint[*curidx].tcpidx=TCPidx;
    ptrpath->keypoint[*curidx].positionhint=positionhint;
    ptrpath->keypoint[*curidx].statehint=0;
    ptrpath->keypoint[*curidx].dt=10;
    (*curidx)++;
  }
}


float blendcubicmaxvel(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, tmpnJointsUnion *mv)
{
  int j;
  tmpnJointsUnion c[4];
  tmpnJointsUnion bl;
  tmpnJointsUnion blmax={{0,0,0,0,0}};
  for (j=0;j<5;j++) {

    c[1].array[j]=v1->array[j];
    c[2].array[j]=-1.0*(3*p1->array[j]-3*p2->array[j]+2*v1->array[j]*ttime+v2->array[j]*ttime)/(ttime*ttime);
    c[3].array[j]=-1.0*(-v1->array[j]*ttime-v2->array[j]*ttime-2*p1->array[j]+2*p2->array[j])/(ttime*ttime*ttime);
  }
  float st;
  st=0.00000;
  for (j=0;j<5;j++) {
    bl.array[j]=fabs(3*c[3].array[j]*pow(st,2)+2*c[2].array[j]*st+c[1].array[j]);
    if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
  }
  st=ttime;
  for (j=0;j<5;j++) {
    bl.array[j]=fabs(3*c[3].array[j]*pow(st,2)+2*c[2].array[j]*st+c[1].array[j]);
    if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
  }
  for (j=0;j<5;j++) {

    float st=ttime*(3*p1->array[j]-3*p2->array[j]+2*v1->array[j]*ttime+v2->array[j]*ttime)/(3*(2*p1->array[j]-2*p2->array[j]+v1->array[j]*ttime+v2->array[j]*ttime));
    if ((st>=0.00)&&(st<=ttime)) {
      bl.array[j]=fabs(3*c[3].array[j]*pow(st,2)+2*c[2].array[j]*st+c[1].array[j]);
      if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
    }
  }

  float scale=0;
  for (j=0;j<5;j++) {
    bl.array[j]=blmax.array[j]/mv->array[j];
    if (bl.array[j]>scale) scale=bl.array[j];

  }
  return scale;
}

float blendcubicmaxacc(tmpnJointsUnion* p1, tmpnJointsUnion* v1, tmpnJointsUnion* p2, tmpnJointsUnion* v2, float ttime, tmpnJointsUnion *ma)
{
  int j;
  tmpnJointsUnion c[4];
  tmpnJointsUnion bl;
  tmpnJointsUnion blmax={{0,0,0,0,0}};
  for (j=0;j<5;j++) {


    c[2].array[j]=-1.0*(3*p1->array[j]-3*p2->array[j]+2*v1->array[j]*ttime+v2->array[j]*ttime)/(ttime*ttime);
    c[3].array[j]=-1.0*(-v1->array[j]*ttime-v2->array[j]*ttime-2*p1->array[j]+2*p2->array[j])/(ttime*ttime*ttime);
  }

  float st;
  st=0.0000000;
  for (j=0;j<5;j++) {
    bl.array[j]=fabs(6*c[3].array[j]*st+2*c[2].array[j]);
    if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
  }
  st=ttime;
  for (j=0;j<5;j++) {
    bl.array[j]=fabs(6*c[3].array[j]*st+2*c[2].array[j]);
    if (bl.array[j]>blmax.array[j]) blmax.array[j]=bl.array[j];
  }

  float scale=0;
  for (j=0;j<5;j++) {
    bl.array[j]=blmax.array[j]/ma->array[j];
    if (bl.array[j]>scale) scale=bl.array[j];
  }

  return scale;
}
# 580 "genscript.c"
float trajopt(tmpnRobot *robot, tmpnPathDef *ptrpath, int pathidnum, int pathtype, int loadgroup, int trajectorytype, float samplerate, int fromTCPidx, int toTCPidx,tmpnJointsUnion* mv, tmpnJointsUnion* ma, tmpnVector* frompos, tmpnVector* fromvel, tmpnVector* topos, tmpnVector* tovel, tmpnDualVector* via1pos, tmpnVector* via1vel, tmpnDualVector* via2pos, tmpnVector* via2vel, macroparamstruct* startmacro, macroparamstruct* endmacro,int blendtype,float lockv)
{
  tmpnRobot temprobot;
  memcpy(&temprobot,robot,sizeof(temprobot));
 temprobot.m_snapToGrid=0;
  int curidx=1;
  int* pcuridx=&curidx;
  int positionhint=0;
  int exectime=0,blendintime=0,blendouttime=0;
  float retval=0.0;



  tmpnVector toposloc,fromposloc;
  memcpy(&toposloc,topos,sizeof(toposloc));
  memcpy(&fromposloc,frompos,sizeof(fromposloc));

  tmpnVector tovelloc,fromvelloc;
  memcpy(&tovelloc,tovel,sizeof(tovelloc));
  memcpy(&fromvelloc,fromvel,sizeof(fromvelloc));

  int startmacrotime=0;
  if (startmacro->type==2) {
    startmacrotime=(int)(1000*startmacro->time);
    fromposloc.y+=startmacro->length;
    fromvelloc.x=0;
    fromvelloc.y=uplinespeed(startmacro->length,startmacro->time);
    fromvelloc.z=0;
    fromvelloc.v=0;
    fromvelloc.w=0;
    fromvelloc.u=0;
  }
 else if (startmacro->type==4) {
    startmacrotime=(int)(1000*startmacro->time);
    fromposloc.y+=startmacro->length;
    fromvelloc.x=0;
    fromvelloc.y=fastuplinespeed(startmacro->length,startmacro->time);
    fromvelloc.z=0;
    fromvelloc.v=0;
    fromvelloc.w=0;
    fromvelloc.u=0;
  }
  int endmacrotime=0;
  if (endmacro->type==1) {
    endmacrotime=(int)(1000*endmacro->time);
    toposloc.y+=endmacro->length;
    tovelloc.x=0;
    tovelloc.y=spiralspeed(endmacro->length,endmacro->time);
    tovelloc.z=0;
    tovelloc.v=0;
    tovelloc.w=0;
    tovelloc.u=0;
  }
  else if (endmacro->type==3) {
    endmacrotime=(int)(1000*endmacro->time);
    toposloc.y+=endmacro->length;
    tovelloc.x=0;
    tovelloc.y=downlinespeed(endmacro->length,endmacro->time);
    tovelloc.z=0;
    tovelloc.v=0;
    tovelloc.w=0;
    tovelloc.u=0;
  }
 else if (endmacro->type==5) {
    endmacrotime=(int)(1000*endmacro->time);
    toposloc.y+=endmacro->length;
    tovelloc.x=0;
    tovelloc.y=fastdownlinespeed(endmacro->length,endmacro->time);
    tovelloc.z=0;
    tovelloc.v=0;
    tovelloc.w=0;
    tovelloc.u=0;
  }


  tmpnJoints fromjoints,tojoints;
  tmpnJoints fromdeltajoints,todeltajoints;
  tmpnVector fromdelta,todelta;
  tmpnJoints fromveljoint,toveljoint;

  fromdelta.x = fromposloc.x + fromvelloc.x*0.0005;
  fromdelta.y = fromposloc.y + fromvelloc.y*0.0005;
  fromdelta.z = fromposloc.z + fromvelloc.z*0.0005;
  fromdelta.v = fromposloc.v + fromvelloc.v*0.0005;
  fromdelta.w = fromposloc.w + fromvelloc.w*0.0005;
  fromdelta.u = fromposloc.u + fromvelloc.u*0.0005;

  todelta.x = toposloc.x + tovelloc.x*0.0005;
  todelta.y = toposloc.y + tovelloc.y*0.0005;
  todelta.z = toposloc.z + tovelloc.z*0.0005;
  todelta.v = toposloc.v + tovelloc.v*0.0005;
  todelta.w = toposloc.w + tovelloc.w*0.0005;
  todelta.u = toposloc.u + tovelloc.u*0.0005;

  tmpnComputeIK(&temprobot,fromposloc.x,fromposloc.y,fromposloc.z,fromposloc.v,fromposloc.w,fromposloc.u,fromTCPidx);
  fromjoints=temprobot.m_joint;
  tmpnComputeIK(&temprobot,toposloc.x,toposloc.y,toposloc.z,toposloc.v,toposloc.w,toposloc.u,toTCPidx);
  tojoints=temprobot.m_joint;

  tmpnComputeIK(&temprobot,fromdelta.x,fromdelta.y,fromdelta.z,fromdelta.v,fromdelta.w,fromdelta.u,fromTCPidx);
  fromdeltajoints=temprobot.m_joint;
  tmpnComputeIK(&temprobot,todelta.x,todelta.y,todelta.z,todelta.v,todelta.w,todelta.u,toTCPidx);
  todeltajoints=temprobot.m_joint;

  fromveljoint.a = 2000.0*(fromdeltajoints.a-fromjoints.a);
  fromveljoint.b = 2000.0*(fromdeltajoints.b-fromjoints.b);
  fromveljoint.c = 2000.0*(fromdeltajoints.c-fromjoints.c);
  fromveljoint.d = 2000.0*(fromdeltajoints.d-fromjoints.d);
  fromveljoint.e = 2000.0*(fromdeltajoints.e-fromjoints.e);
  fromveljoint.f = 2000.0*(fromdeltajoints.f-fromjoints.f);

  toveljoint.a = 2000.0*(todeltajoints.a-tojoints.a);
  toveljoint.b = 2000.0*(todeltajoints.b-tojoints.b);
  toveljoint.c = 2000.0*(todeltajoints.c-tojoints.c);
  toveljoint.d = 2000.0*(todeltajoints.d-tojoints.d);
  toveljoint.e = 2000.0*(todeltajoints.e-tojoints.e);
  toveljoint.f = 2000.0*(todeltajoints.f-tojoints.f);




  tmpnVector via1postot;
  tmpnVector via2postot;
 via1postot.x=(via1pos->absx) ? via1pos->x : fromposloc.x+via1pos->x;
  via1postot.y=(via1pos->absy) ? via1pos->y : fromposloc.y+via1pos->y;
  via1postot.z=(via1pos->absz) ? via1pos->z : fromposloc.z+via1pos->z;
  via1postot.v=(via1pos->absv) ? via1pos->v : fromposloc.v+via1pos->v;
  via1postot.w=(via1pos->absw) ? via1pos->w : fromposloc.w+via1pos->w;
  via1postot.u=(via1pos->absu) ? via1pos->u : fromposloc.u+via1pos->u;
  via2postot.x=(via2pos->absx) ? via2pos->x : toposloc.x+via2pos->x;
  via2postot.y=(via2pos->absy) ? via2pos->y : toposloc.y+via2pos->y;
  via2postot.z=(via2pos->absz) ? via2pos->z : toposloc.z+via2pos->z;
  via2postot.v=(via2pos->absv) ? via2pos->v : toposloc.v+via2pos->v;
  via2postot.w=(via2pos->absw) ? via2pos->w : toposloc.w+via2pos->w;
  via2postot.u=(via2pos->absu) ? via2pos->u : toposloc.u+via2pos->u;

  tmpnVector via1delta,via2delta;
  tmpnJoints via1posjoint,via1posdeltajoint;
  tmpnJoints via2posjoint,via2posdeltajoint;
  tmpnJoints via1veljoint,via2veljoint;
  via1delta.x = via1postot.x + via1vel->x*0.0005;
  via1delta.y = via1postot.y + via1vel->y*0.0005;
  via1delta.z = via1postot.z + via1vel->z*0.0005;
  via1delta.v = via1postot.v + via1vel->v*0.0005;
  via1delta.w = via1postot.w + via1vel->w*0.0005;
  via1delta.u = via1postot.u + via1vel->u*0.0005;

  via2delta.x = via2postot.x + via2vel->x*0.0005;
  via2delta.y = via2postot.y + via2vel->y*0.0005;
  via2delta.z = via2postot.z + via2vel->z*0.0005;
  via2delta.v = via2postot.v + via2vel->v*0.0005;
  via2delta.w = via2postot.w + via2vel->w*0.0005;
  via2delta.u = via2postot.u + via2vel->u*0.0005;
  tmpnComputeIK(&temprobot,via1postot.x,via1postot.y,via1postot.z,via1postot.v,via1postot.w,via1postot.u,fromTCPidx);
  via1posjoint=temprobot.m_joint;
  tmpnComputeIK(&temprobot,via1delta.x,via1delta.y,via1delta.z,via1delta.v,via1delta.w,via1delta.u,fromTCPidx);
  via1posdeltajoint=temprobot.m_joint;

  tmpnComputeIK(&temprobot,via2postot.x,via2postot.y,via2postot.z,via2postot.v,via2postot.w,via2postot.u,toTCPidx);
  via2posjoint=temprobot.m_joint;
  tmpnComputeIK(&temprobot,via2delta.x,via2delta.y,via2delta.z,via2delta.v,via2delta.w,via2delta.u,toTCPidx);
  via2posdeltajoint=temprobot.m_joint;

  via1veljoint.a = 2000.0*(via1posdeltajoint.a-via1posjoint.a);
  via1veljoint.b = 2000.0*(via1posdeltajoint.b-via1posjoint.b);
  via1veljoint.c = 2000.0*(via1posdeltajoint.c-via1posjoint.c);
  via1veljoint.d = 2000.0*(via1posdeltajoint.d-via1posjoint.d);
  via1veljoint.e = 2000.0*(via1posdeltajoint.e-via1posjoint.e);
  via1veljoint.f = 2000.0*(via1posdeltajoint.f-via1posjoint.f);

  via2veljoint.a = 2000.0*(via2posdeltajoint.a-via2posjoint.a);
  via2veljoint.b = 2000.0*(via2posdeltajoint.b-via2posjoint.b);
  via2veljoint.c = 2000.0*(via2posdeltajoint.c-via2posjoint.c);
  via2veljoint.d = 2000.0*(via2posdeltajoint.d-via2posjoint.d);
  via2veljoint.e = 2000.0*(via2posdeltajoint.e-via2posjoint.e);
  via2veljoint.f = 2000.0*(via2posdeltajoint.f-via2posjoint.f);







  tmpnJointsDUnion startpos= {{0.0,0.0,0.0,0.0,0.0}};
  tmpnJointsDUnion startvel = {{0.0,0.0,0.0,0.0,0.0}};
  tmpnJointsDUnion slutpos = {{0.0,0.0,0.0,0.0,0.0}};
  tmpnJointsDUnion slutvel = {{0.0,0.0,0.0,0.0,0.0}};

  tmpnJointsDUnion startposrad,startvelrad,slutposrad,slutvelrad;

  switch(trajectorytype) {
  case 0:
    startpos.name.a = (double)fromjoints.a;
    startpos.name.b = (double)fromjoints.b;
    startpos.name.c = (double)fromjoints.c;
    startpos.name.d = (double)fromjoints.d;
    startpos.name.e = (double)fromjoints.e;

    slutpos.name.a = (double)tojoints.a;
    slutpos.name.b = (double)tojoints.b;
    slutpos.name.c = (double)tojoints.c;
    slutpos.name.d = (double)tojoints.d;
    slutpos.name.e = (double)tojoints.e;
    break;
  case 1:
    startpos.name.a = (double)via1posjoint.a;
    startpos.name.b = (double)via1posjoint.b;
    startpos.name.c = (double)via1posjoint.c;
    startpos.name.d = (double)via1posjoint.d;
    startpos.name.e = (double)via1posjoint.e;

    startvel.name.a = (double)via1veljoint.a;
    startvel.name.b = (double)via1veljoint.b;
    startvel.name.c = (double)via1veljoint.c;
    startvel.name.d = (double)via1veljoint.d;
    startvel.name.e = (double)via1veljoint.e;

    slutpos.name.a = (double)tojoints.a;
    slutpos.name.b = (double)tojoints.b;
    slutpos.name.c = (double)tojoints.c;
    slutpos.name.d = (double)tojoints.d;
    slutpos.name.e = (double)tojoints.e;
    break;
  case 2:
    startpos.name.a = (double)fromjoints.a;
    startpos.name.b = (double)fromjoints.b;
    startpos.name.c = (double)fromjoints.c;
    startpos.name.d = (double)fromjoints.d;
    startpos.name.e = (double)fromjoints.e;

    slutpos.name.a = (double)via2posjoint.a;
    slutpos.name.b = (double)via2posjoint.b;
    slutpos.name.c = (double)via2posjoint.c;
    slutpos.name.d = (double)via2posjoint.d;
    slutpos.name.e = (double)via2posjoint.e;

    slutvel.name.a = (double)via2veljoint.a;
    slutvel.name.b = (double)via2veljoint.b;
    slutvel.name.c = (double)via2veljoint.c;
    slutvel.name.d = (double)via2veljoint.d;
    slutvel.name.e = (double)via2veljoint.e;
    break;
  case 3:
    startpos.name.a = (double)via1posjoint.a;
    startpos.name.b = (double)via1posjoint.b;
    startpos.name.c = (double)via1posjoint.c;
    startpos.name.d = (double)via1posjoint.d;
    startpos.name.e = (double)via1posjoint.e;

    startvel.name.a = (double)via1veljoint.a;
    startvel.name.b = (double)via1veljoint.b;
    startvel.name.c = (double)via1veljoint.c;
    startvel.name.d = (double)via1veljoint.d;
    startvel.name.e = (double)via1veljoint.e;

    slutpos.name.a = (double)via2posjoint.a;
    slutpos.name.b = (double)via2posjoint.b;
    slutpos.name.c = (double)via2posjoint.c;
    slutpos.name.d = (double)via2posjoint.d;
    slutpos.name.e = (double)via2posjoint.e;

    slutvel.name.a = (double)via2veljoint.a;
    slutvel.name.b = (double)via2veljoint.b;
    slutvel.name.c = (double)via2veljoint.c;
    slutvel.name.d = (double)via2veljoint.d;
    slutvel.name.e = (double)via2veljoint.e;
  }





  tmpnJointsDUnion mvd = {{((mv->array[0])*(float)0.001),((mv->array[1])*(float)3.1415926535898/(float)180.0),((mv->array[2])*(float)3.1415926535898/(float)180.0),((mv->array[3])*(float)3.1415926535898/(float)180.0),((mv->array[4])*(float)3.1415926535898/(float)180.0)}};
  tmpnJointsDUnion mad = {{((ma->array[0])*(float)0.001),((ma->array[1])*(float)3.1415926535898/(float)180.0),((ma->array[2])*(float)3.1415926535898/(float)180.0),((ma->array[3])*(float)3.1415926535898/(float)180.0),((ma->array[4])*(float)3.1415926535898/(float)180.0)}};

  startposrad.name.a = ((startpos.name.a)*(float)0.001);
  startposrad.name.b = ((startpos.name.b)*(float)3.1415926535898/(float)180.0);
  startposrad.name.c = ((startpos.name.c)*(float)3.1415926535898/(float)180.0);
  startposrad.name.d = ((startpos.name.d)*(float)3.1415926535898/(float)180.0);
  startposrad.name.e = ((startpos.name.e)*(float)3.1415926535898/(float)180.0);
  startvelrad.name.a = ((startvel.name.a)*(float)0.001);
  startvelrad.name.b = ((startvel.name.b)*(float)3.1415926535898/(float)180.0);
  startvelrad.name.c = ((startvel.name.c)*(float)3.1415926535898/(float)180.0);
  startvelrad.name.d = ((startvel.name.d)*(float)3.1415926535898/(float)180.0);
  startvelrad.name.e = ((startvel.name.e)*(float)3.1415926535898/(float)180.0);

  slutposrad.name.a = ((slutpos.name.a)*(float)0.001);
  slutposrad.name.b = ((slutpos.name.b)*(float)3.1415926535898/(float)180.0);
  slutposrad.name.c = ((slutpos.name.c)*(float)3.1415926535898/(float)180.0);
  slutposrad.name.d = ((slutpos.name.d)*(float)3.1415926535898/(float)180.0);
  slutposrad.name.e = ((slutpos.name.e)*(float)3.1415926535898/(float)180.0);
  slutvelrad.name.a = ((slutvel.name.a)*(float)0.001);
  slutvelrad.name.b = ((slutvel.name.b)*(float)3.1415926535898/(float)180.0);
  slutvelrad.name.c = ((slutvel.name.c)*(float)3.1415926535898/(float)180.0);
  slutvelrad.name.d = ((slutvel.name.d)*(float)3.1415926535898/(float)180.0);
  slutvelrad.name.e = ((slutvel.name.e)*(float)3.1415926535898/(float)180.0);

  bane b(startposrad,startvelrad,slutposrad,slutvelrad,mvd,mad);
  b.optimer();
  baneConf baneRes;
  double alpha;
  b.getResult(baneRes,alpha);

  exectime = (int)(0.5+alpha*4000);
  retval = alpha*4.0;

  tmpnJointsUnion opp,opv,opa;
  tmpnJointsUnion tpp,tpv,tpa;

  switch(trajectorytype) {
  case 2:
    tpp.name.a=tojoints.a;
    tpp.name.b=tojoints.b;
    tpp.name.c=tojoints.c;
    tpp.name.d=tojoints.d;
    tpp.name.e=tojoints.e;
    tpv.name.a=toveljoint.a;
    tpv.name.b=toveljoint.b;
    tpv.name.c=toveljoint.c;
    tpv.name.d=toveljoint.d;
    tpv.name.e=toveljoint.e;
    tpa.name.a=0;
    tpa.name.b=0;
    tpa.name.c=0;
    tpa.name.d=0;
    tpa.name.e=0;
    break;
  case 0:
    break;
  case 3:
    tpp.name.a=tojoints.a;
    tpp.name.b=tojoints.b;
    tpp.name.c=tojoints.c;
    tpp.name.d=tojoints.d;
    tpp.name.e=tojoints.e;
    tpv.name.a=toveljoint.a;
    tpv.name.b=toveljoint.b;
    tpv.name.c=toveljoint.c;
    tpv.name.d=toveljoint.d;
    tpv.name.e=toveljoint.e;
    tpa.name.a=0;
    tpa.name.b=0;
    tpa.name.c=0;
    tpa.name.d=0;
    tpa.name.e=0;

  case 1:
    opp.name.a=fromjoints.a;
    opp.name.b=fromjoints.b;
    opp.name.c=fromjoints.c;
    opp.name.d=fromjoints.d;
    opp.name.e=fromjoints.e;
    opv.name.a=fromveljoint.a;
    opv.name.b=fromveljoint.b;
    opv.name.c=fromveljoint.c;
    opv.name.d=fromveljoint.d;
    opv.name.e=fromveljoint.e;
    opa.name.a=0;
    opa.name.b=0;
    opa.name.c=0;
    opa.name.d=0;
    opa.name.e=0;
  }

  float acceldivisor=1.05;
 float accelmultiplicator=1.0/acceldivisor;

  tmpnJointsUnion spp,spv,spa;
  spp.name.a = startpos.name.a;
  spp.name.b = startpos.name.b;
  spp.name.c = startpos.name.c;
  spp.name.d = startpos.name.d;
  spp.name.e = startpos.name.e;
  spv.name.a=((b.dcubicpoly(0,0.0))*(float)1000.0);
  spv.name.b=((b.dcubicpoly(1,0.0))*(float)180.0/(float)3.1415926535898);
  spv.name.c=((b.dcubicpoly(2,0.0))*(float)180.0/(float)3.1415926535898);
  spv.name.d=((b.dcubicpoly(3,0.0))*(float)180.0/(float)3.1415926535898);
  spv.name.e=((b.dcubicpoly(4,0.0))*(float)180.0/(float)3.1415926535898);
  spa.name.a=spv.name.a*0.002+((b.ddcubicpoly(0,0.0))*(float)1000.0)*accelmultiplicator;
  spa.name.b=spv.name.b*0.002+((b.ddcubicpoly(1,0.0))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  spa.name.c=spv.name.c*0.002+((b.ddcubicpoly(2,0.0))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  spa.name.d=spv.name.d*0.002+((b.ddcubicpoly(3,0.0))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  spa.name.e=spv.name.e*0.002+((b.ddcubicpoly(4,0.0))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  tmpnJointsUnion epp,epv,epa;
  epp.name.a = slutpos.name.a;
  epp.name.b = slutpos.name.b;
  epp.name.c = slutpos.name.c;
  epp.name.d = slutpos.name.d;
  epp.name.e = slutpos.name.e;

 float attime=3.999999*alpha;

  epv.name.a=((b.dcubicpoly(0,attime))*(float)1000.0);
  epv.name.b=((b.dcubicpoly(1,attime))*(float)180.0/(float)3.1415926535898);
  epv.name.c=((b.dcubicpoly(2,attime))*(float)180.0/(float)3.1415926535898);
  epv.name.d=((b.dcubicpoly(3,attime))*(float)180.0/(float)3.1415926535898);
  epv.name.e=((b.dcubicpoly(4,attime))*(float)180.0/(float)3.1415926535898);
  epa.name.a=epv.name.a*0.002+((b.ddcubicpoly(0,attime))*(float)1000.0)*accelmultiplicator;
  epa.name.b=epv.name.b*0.002+((b.ddcubicpoly(1,attime))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  epa.name.c=epv.name.c*0.002+((b.ddcubicpoly(2,attime))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  epa.name.d=epv.name.d*0.002+((b.ddcubicpoly(3,attime))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;
  epa.name.e=epv.name.e*0.002+((b.ddcubicpoly(4,attime))*(float)180.0/(float)3.1415926535898)*accelmultiplicator;


  if((trajectorytype==1)||(trajectorytype==3)) {
    float scalein;
    float p1=0,p3=5;
    float p2=(p3+p1)*0.5;
    scalein=p2;
    float dscale=p3-p1;
    float maxinacc,maxinvel;
    while (dscale>0.0002)
    {
      if (blendtype==1)
      {
    maxinacc=blendquinticmaxacc(&opp, &opv, &opa, &spp, &spv, &spa,scalein,ma);
    maxinvel=blendquinticmaxvel(&opp, &opv, &opa, &spp, &spv, &spa,scalein,mv);
      }
      else
      {
    maxinacc=blendcubicmaxacc(&opp, &opv, &spp, &spv, scalein, ma);
        maxinvel=blendcubicmaxvel(&opp, &opv, &spp, &spv, scalein, mv);
      }
      if (maxinacc<maxinvel) {
    maxinacc=maxinvel;
      }
      if (maxinacc>1.00) {
    p1=p2;
      }
      else if (maxinacc<1.00) {
    p3=p2;
      }
      else break;
      p2=(p3+p1)*0.5;
      scalein=p2;
      dscale=p3-p1;

    }
    blendintime=(int)(0.5+1000*scalein);
    retval+=scalein;
  }

  if ((trajectorytype==2)||(trajectorytype==3)) {
    float scaleout;
    float p1=0,p3=5;
    float p2=(p3+p1)*0.5;
    scaleout=p2;
    float maxoutacc,maxoutvel;
    float dscale=p3-p1;
    while (dscale>0.0002) {
      if (blendtype==1)
      {
    maxoutacc=blendquinticmaxacc(&epp, &epv, &epa, &tpp, &tpv, &tpa,scaleout,ma);
    maxoutvel=blendquinticmaxvel(&epp, &epv, &epa, &tpp, &tpv, &tpa,scaleout,mv);
      }
      else
      {
    maxoutacc=blendcubicmaxacc(&epp, &epv, &tpp, &tpv, scaleout, ma);
    maxoutvel=blendcubicmaxvel(&epp, &epv, &tpp, &tpv, scaleout, mv);
      }
      if (maxoutacc<maxoutvel) {
    maxoutacc=maxoutvel;
      }

      if (maxoutacc>1.00) {
    p1=p2;
      }
      else if (maxoutacc<1.00) {
    p3=p2;
      }
      else break;
      p2=(p3+p1)*0.5;
      scaleout=p2;
      dscale=p3-p1;

    }
    blendouttime=(int)(0.5+1000*scaleout);
    retval+=scaleout;
  }




  if (startmacro->type!=0) {
    exectime+=startmacrotime;
    retval+=startmacrotime*0.001;
  }
  if (endmacro->type!=0) {
    exectime+=endmacrotime;
    retval+=endmacrotime*0.001;
  }
  if (trajectorytype==1) {
    exectime+=blendintime;
  }
  else if (trajectorytype==2) {
    exectime+=blendouttime;
  }
  else if (trajectorytype==3) {
    exectime+=(blendintime+blendouttime);
  }
  int innos = (int)(0.5+blendintime*samplerate*0.001);
  int outnos = (int)(0.5+blendouttime*samplerate*0.001);
  int startmacronos = (int)(0.5+startmacrotime*samplerate*0.001);
  int endmacronos = (int)(0.5+endmacrotime*samplerate*0.001);
  int optsamples=(int)(0.5+4*alpha*samplerate);
  int totnos = (innos+outnos+optsamples+startmacronos+endmacronos);
  exectime+=(int)(2.0*exectime/((double)totnos));
  retval+=2.0*retval/((float)totnos);




  if (startmacro->type==2) {
    if (startmacro->positionhint == 2) {
      positionhint++;
   ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
   ptrpath->poshint[ptrpath->maxpidx].time=-1;
   ptrpath->poshint[ptrpath->maxpidx].i=0;
   ptrpath->maxpidx++;
    }

    uplineMacro(&temprobot, ptrpath, pcuridx, startmacro->length, startmacro->time, &fromposloc, startmacronos, fromTCPidx,positionhint);
    if (startmacro->positionhint == 1) {
      positionhint++;
      ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
      ptrpath->poshint[ptrpath->maxpidx].time=-1;
      ptrpath->poshint[ptrpath->maxpidx].i=0;
      ptrpath->maxpidx++;
    }
  }
 else if (startmacro->type==4) {
    if (startmacro->positionhint == 2) {
      positionhint++;
   ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
   ptrpath->poshint[ptrpath->maxpidx].time=-1;
   ptrpath->poshint[ptrpath->maxpidx].i=0;
   ptrpath->maxpidx++;
    }

    fastUplineMacro(&temprobot, ptrpath, pcuridx, startmacro->length, startmacro->time, &fromposloc, startmacronos, fromTCPidx,positionhint);
    if (startmacro->positionhint == 1) {
      positionhint++;
      ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
      ptrpath->poshint[ptrpath->maxpidx].time=-1;
      ptrpath->poshint[ptrpath->maxpidx].i=0;
      ptrpath->maxpidx++;
    }
  }

  if ((trajectorytype==1)||(trajectorytype==3)) {
    if (blendtype==1)
      blendquintic(ptrpath, pcuridx, &opp, &opv, &opa, &spp, &spv, &spa, (float)(blendintime*0.001), innos, fromTCPidx, &temprobot, positionhint, 0);
    else
      blendcubic(ptrpath, pcuridx, &opp, &opv, &spp, &spv, (float)(blendintime*0.001), innos, fromTCPidx, &temprobot, positionhint, 0);

  }

  tmpnJoints tj;


  for (int i=0;i<optsamples+1;i++)
  {
    double thistime=i*4.0*alpha/optsamples;
    if (i==optsamples) {
      if ((trajectorytype==2)||(trajectorytype==3)) break;
      else thistime=3.9999999*alpha;
    }
    tj.a = ((b.cubicpoly(0,thistime))*(float)1000.0);
    tj.b = ((b.cubicpoly(1,thistime))*(float)180.0/(float)3.1415926535898);
    tj.c = ((b.cubicpoly(2,thistime))*(float)180.0/(float)3.1415926535898);
    tj.d = ((b.cubicpoly(3,thistime))*(float)180.0/(float)3.1415926535898);
    tj.e = ((b.cubicpoly(4,thistime))*(float)180.0/(float)3.1415926535898);
    tj.f = 0.0;

    tmpnComputeFKlogic(&temprobot, tj.a, tj.b, tj.c, tj.d, tj.e, tj.f, fromTCPidx);
    ptrpath->keypoint[curidx].x=temprobot.m_worldPoint.x;
    ptrpath->keypoint[curidx].y=temprobot.m_worldPoint.y;
    ptrpath->keypoint[curidx].z=temprobot.m_worldPoint.z;
    ptrpath->keypoint[curidx].v=temprobot.m_worldPoint.v;
    ptrpath->keypoint[curidx].w=temprobot.m_worldPoint.w;
    ptrpath->keypoint[curidx].u=temprobot.m_worldPoint.u;
    ptrpath->keypoint[curidx].tcpidx=fromTCPidx;
    ptrpath->keypoint[curidx].positionhint=positionhint;
    ptrpath->keypoint[curidx].statehint=0;
    ptrpath->keypoint[curidx].dt=10;
    curidx++;

  }



  if ((trajectorytype==2)||(trajectorytype==3)) {
    int last=0;
    if (endmacro->type==0) last=1;
    if (blendtype == 1)
      blendquintic(ptrpath, pcuridx, &epp, &epv, &epa, &tpp, &tpv, &tpa, (float)(blendouttime*0.001), outnos, toTCPidx, &temprobot, positionhint, last);
    else
      blendcubic(ptrpath, pcuridx, &epp, &epv, &tpp, &tpv, (float)(blendouttime*0.001), outnos, toTCPidx, &temprobot,positionhint,last);

  }

  if (endmacro->type==1) {
    if (endmacro->positionhint == 2) {
      positionhint++;
      ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
      ptrpath->poshint[ptrpath->maxpidx].time=-1;
      ptrpath->poshint[ptrpath->maxpidx].i=0;
      ptrpath->maxpidx++;
    }
    spiralMacro(&temprobot, ptrpath, pcuridx, endmacro->amplitude, endmacro->offsx, endmacro->offsz, endmacro->length, endmacro->frequency, endmacro->time, &toposloc, endmacronos, toTCPidx, positionhint);
  }
  else if (endmacro->type==3) {
    if (endmacro->positionhint == 2) {
      positionhint++;
      ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
      ptrpath->poshint[ptrpath->maxpidx].time=-1;
      ptrpath->poshint[ptrpath->maxpidx].i=0;
      ptrpath->maxpidx++;
    }
    downlineMacro(&temprobot, ptrpath, pcuridx, endmacro->length, endmacro->time, &toposloc, endmacronos, toTCPidx, positionhint);
  }
  else if (endmacro->type==5) {
    if (endmacro->positionhint == 2) {
      positionhint++;
      ptrpath->poshint[ptrpath->maxpidx].positionhint=positionhint;
      ptrpath->poshint[ptrpath->maxpidx].time=-1;
      ptrpath->poshint[ptrpath->maxpidx].i=0;
      ptrpath->maxpidx++;
    }
    fastDownlineMacro(&temprobot, ptrpath, pcuridx, endmacro->length, endmacro->time, &toposloc, endmacronos, toTCPidx, positionhint);
  }

  ptrpath->keypoint[curidx].x=ptrpath->keypoint[curidx-1].x;
  ptrpath->keypoint[curidx].y=ptrpath->keypoint[curidx-1].y;
  ptrpath->keypoint[curidx].z=ptrpath->keypoint[curidx-1].z;
  ptrpath->keypoint[curidx].v=ptrpath->keypoint[curidx-1].v;
  ptrpath->keypoint[curidx].w=ptrpath->keypoint[curidx-1].w;
  ptrpath->keypoint[curidx].u=ptrpath->keypoint[curidx-1].u;
  ptrpath->keypoint[curidx].tcpidx=ptrpath->keypoint[curidx-1].tcpidx;
  ptrpath->keypoint[curidx].positionhint=ptrpath->keypoint[curidx-1].positionhint;
  ptrpath->keypoint[curidx].statehint=0;
  ptrpath->keypoint[curidx].dt=10;
  curidx++;


  ptrpath->keypoint[0].x=ptrpath->keypoint[1].x;
  ptrpath->keypoint[0].y=ptrpath->keypoint[1].y;
  ptrpath->keypoint[0].z=ptrpath->keypoint[1].z;
  ptrpath->keypoint[0].v=ptrpath->keypoint[1].v;
  ptrpath->keypoint[0].w=ptrpath->keypoint[1].w;
  ptrpath->keypoint[0].u=ptrpath->keypoint[1].u;
  ptrpath->keypoint[0].tcpidx=ptrpath->keypoint[1].tcpidx;
  ptrpath->keypoint[0].positionhint=0;
  ptrpath->keypoint[0].statehint=0;
  ptrpath->keypoint[0].dt=10;


 if (lockv!=1000.0)
 {
  for (int i=0;i<=curidx;i++)
  {
   ptrpath->keypoint[i].v=lockv;
  }
 }
  ptrpath->maxTime=(float)exectime;

  ptrpath->maxidx=curidx;

  ptrpath->spline=robot->splinehint;
  ptrpath->splineorder=robot->splineorder;

  return retval;
}

double uniform(double min, double max)
{
  static const double rmax=2147483647 +1.0;
  return (max-min)*(rand())/rmax+min;
}

int randomindex(int max)
{
        return (int)((1.0*max*rand())/2147483647);
}

void VAD(double x1,double x2,double x3,double y1,double y2,double y3,double* vel,double* acc) {
  double A,B;
 double temp1,temp2,temp3;
 temp1=y1/((x1-x2)*(x1-x3));
 temp2=y2/((x2-x1)*(x2-x3));
 temp3=y3/((x3-x1)*(x3-x2));
 A = temp1 + temp2 + temp3;
 B = -1.0*((x1+x2)*temp3+(x1+x3)*temp2+(x2+x3)*temp1);
 *acc=2*A;
 *vel=(*acc)*x2+B;
}

void jerkMinimizer(tmpnRobot *robot, tmpnPathDef *ptrpath, int tcpidx, int jerkscale)
{
 srand((unsigned)time(__null));
 printf("\n------------------before--------------------------\n");
 int i=0,j=0;
 float tvar=ptrpath->maxTime/(1000.0*ptrpath->maxidx);
 tmpnJointsDUnion pos[1000];
 tmpnJointsDUnion vel[1000];
 tmpnJointsDUnion acc[1000];
 tmpnJointsDUnion jerk[1000];
 double dummy;
 vel[0].name.a=0.0;
 vel[0].name.b=0.0;
 vel[0].name.c=0.0;
 vel[0].name.d=0.0;
 vel[0].name.e=0.0;
 vel[ptrpath->maxidx-1].name.a=0.0;
 vel[ptrpath->maxidx-1].name.b=0.0;
 vel[ptrpath->maxidx-1].name.c=0.0;
 vel[ptrpath->maxidx-1].name.d=0.0;
 vel[ptrpath->maxidx-1].name.e=0.0;
 for (i=0;i<ptrpath->maxidx;i++)
 {
  tmpnComputeIK(robot,ptrpath->keypoint[i].x,ptrpath->keypoint[i].y,ptrpath->keypoint[i].z,ptrpath->keypoint[i].v,ptrpath->keypoint[i].w,ptrpath->keypoint[i].u,tcpidx);
  pos[i].name.a=robot->m_joint.a;
  pos[i].name.b=robot->m_joint.b;
  pos[i].name.c=robot->m_joint.c;
  pos[i].name.d=robot->m_joint.d;
  pos[i].name.e=robot->m_joint.e;
 }
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),pos[i-1].array[j],pos[i].array[j],pos[i+1].array[j],&vel[i].array[j],&dummy);
  }
 }
 acc[0].name.a=0.0;
 acc[0].name.b=0.0;
 acc[0].name.c=0.0;
 acc[0].name.d=0.0;
 acc[0].name.e=0.0;
 acc[ptrpath->maxidx-1].name.a=0.0;
 acc[ptrpath->maxidx-1].name.b=0.0;
 acc[ptrpath->maxidx-1].name.c=0.0;
 acc[ptrpath->maxidx-1].name.d=0.0;
 acc[ptrpath->maxidx-1].name.e=0.0;
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),vel[i-1].array[j],vel[i].array[j],vel[i+1].array[j],&acc[i].array[j],&dummy);
  }
 }
 jerk[0].name.a=0.0;
 jerk[0].name.b=0.0;
 jerk[0].name.c=0.0;
 jerk[0].name.d=0.0;
 jerk[0].name.e=0.0;
 jerk[ptrpath->maxidx-1].name.a=0.0;
 jerk[ptrpath->maxidx-1].name.b=0.0;
 jerk[ptrpath->maxidx-1].name.c=0.0;
 jerk[ptrpath->maxidx-1].name.d=0.0;
 jerk[ptrpath->maxidx-1].name.e=0.0;
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),acc[i-1].array[j],acc[i].array[j],acc[i+1].array[j],&jerk[i].array[j],&dummy);
  }
 }
 for (i=0;i<ptrpath->maxidx;i++)
 {
  printf("%0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f\n",i*tvar,pos[i].name.a,((vel[i].name.a)*(float)0.001),((acc[i].name.a)*(float)0.001),((jerk[i].name.a)*(float)0.001)*((jerk[i].name.a)*(float)0.001),pos[i].name.b,((vel[i].name.b)*(float)3.1415926535898/(float)180.0),((acc[i].name.b)*(float)3.1415926535898/(float)180.0),((jerk[i].name.b)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.b)*(float)3.1415926535898/(float)180.0),pos[i].name.c,((vel[i].name.c)*(float)3.1415926535898/(float)180.0),((acc[i].name.c)*(float)3.1415926535898/(float)180.0),((jerk[i].name.c)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.c)*(float)3.1415926535898/(float)180.0),pos[i].name.d,((vel[i].name.d)*(float)3.1415926535898/(float)180.0),((acc[i].name.d)*(float)3.1415926535898/(float)180.0),((jerk[i].name.d)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.d)*(float)3.1415926535898/(float)180.0),pos[i].name.e,((vel[i].name.e)*(float)3.1415926535898/(float)180.0),((acc[i].name.e)*(float)3.1415926535898/(float)180.0),((jerk[i].name.e)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.e)*(float)3.1415926535898/(float)180.0));
 }
 int t;
 int maxi=0;
 float maxjerk,minjerk;
 float totjerk;

 for (t=0;t<jerkscale;t++)
 {
  tvar=ptrpath->maxTime/(1000.0*ptrpath->maxidx);
  vel[0].name.a=0.0;vel[0].name.b=0.0;vel[0].name.c=0.0;vel[0].name.d=0.0;vel[0].name.e=0.0;
  vel[ptrpath->maxidx-1].name.a=0.0;vel[ptrpath->maxidx-1].name.b=0.0;vel[ptrpath->maxidx-1].name.c=0.0;vel[ptrpath->maxidx-1].name.d=0.0;vel[ptrpath->maxidx-1].name.e=0.0;
  for (i=1;i<ptrpath->maxidx-1;i++)
  {
   for (j=0;j<5;j++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),pos[i-1].array[j],pos[i].array[j],pos[i+1].array[j],&vel[i].array[j],&dummy);
   }
  }
  acc[0].name.a=0.0;acc[0].name.b=0.0;acc[0].name.c=0.0;acc[0].name.d=0.0;acc[0].name.e=0.0;
  acc[ptrpath->maxidx-1].name.a=0.0;acc[ptrpath->maxidx-1].name.b=0.0;acc[ptrpath->maxidx-1].name.c=0.0;acc[ptrpath->maxidx-1].name.d=0.0;acc[ptrpath->maxidx-1].name.e=0.0;
  for (i=1;i<ptrpath->maxidx-1;i++)
  {
   for (j=0;j<5;j++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),vel[i-1].array[j],vel[i].array[j],vel[i+1].array[j],&acc[i].array[j],&dummy);
   }
  }
  jerk[0].name.a=0.0;jerk[0].name.b=0.0;jerk[0].name.c=0.0;jerk[0].name.d=0.0;jerk[0].name.e=0.0;
  jerk[ptrpath->maxidx-1].name.a=0.0;jerk[ptrpath->maxidx-1].name.b=0.0;jerk[ptrpath->maxidx-1].name.c=0.0;jerk[ptrpath->maxidx-1].name.d=0.0;jerk[ptrpath->maxidx-1].name.e=0.0;
  for (i=1;i<ptrpath->maxidx-1;i++)
  {
   for (j=0;j<5;j++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),acc[i-1].array[j],acc[i].array[j],acc[i+1].array[j],&jerk[i].array[j],&dummy);
   }
  }
  tmpnJointsDUnion temp,temp2,temp3,tmp,tmp2,tmp3;
  tmpnJointsDUnion best,best2,best3;
  int q;
  for (j=0;j<5;j++)
  {
   for (i=1;i<ptrpath->maxidx-1;i++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),pos[i-1].array[j],pos[i].array[j],pos[i+1].array[j],&vel[i].array[j],&dummy);
   }
   for (i=1;i<ptrpath->maxidx-1;i++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),vel[i-1].array[j],vel[i].array[j],vel[i+1].array[j],&acc[i].array[j],&dummy);
   }
   for (i=1;i<ptrpath->maxidx-1;i++)
   {
    VAD(tvar*(i-1),tvar*i,tvar*(i+1),acc[i-1].array[j],acc[i].array[j],acc[i+1].array[j],&jerk[i].array[j],&dummy);
   }
   maxjerk=0.0;
   maxi=2;
   for (i=2;i<ptrpath->maxidx-2;i++)
   {
    totjerk=jerk[i].array[j];
    totjerk*=totjerk;
    if (totjerk>maxjerk)
    {
     maxjerk=totjerk;
     maxi=i;
    }
   }
   if (maxi>=2&&maxi<=ptrpath->maxidx-3)
   {
    if (uniform(0.0,1.0)>=0.5)
     maxi+=randomindex(2);
    else
     maxi-=randomindex(2);
   }


   totjerk=0.0;
   for (i=0;i<ptrpath->maxidx;i++)
   {
    totjerk+=jerk[i].array[j]*jerk[i].array[j];
   }
   minjerk=totjerk;


    best.array[j]=pos[maxi-1].array[j];
   best2.array[j]=pos[maxi].array[j];
   best3.array[j]=pos[maxi+1].array[j];
   for (q=0;q<3;q++)
   {
    tmp.array[j]=pos[maxi-1].array[j];
    tmp2.array[j]=pos[maxi].array[j];
    tmp3.array[j]=pos[maxi+1].array[j];
    temp.array[j]=uniform(pos[maxi-1].array[j], pos[maxi-1].array[j]+(0.01+0.005/(t+1))*(pos[maxi].array[j]-pos[maxi-1].array[j]));
    temp2.array[j]=uniform(pos[maxi].array[j]*0.99, pos[maxi].array[j]*1.01);
    temp3.array[j]=uniform(pos[maxi+1].array[j], pos[maxi+1].array[j]+(0.01+0.005/(t+1))*(pos[maxi].array[j]-pos[maxi+1].array[j]));
    pos[maxi-1].array[j]=temp.array[j];
    pos[maxi].array[j]=temp2.array[j];
    pos[maxi+1].array[j]=temp3.array[j];

    for (i=1;i<ptrpath->maxidx-1;i++)
    {
     VAD(tvar*(i-1),tvar*i,tvar*(i+1),pos[i-1].array[j],pos[i].array[j],pos[i+1].array[j],&vel[i].array[j],&dummy);
    }
    for (i=1;i<ptrpath->maxidx-1;i++)
    {
     VAD(tvar*(i-1),tvar*i,tvar*(i+1),vel[i-1].array[j],vel[i].array[j],vel[i+1].array[j],&acc[i].array[j],&dummy);
    }
    for (i=1;i<ptrpath->maxidx-1;i++)
    {
     VAD(tvar*(i-1),tvar*i,tvar*(i+1),acc[i-1].array[j],acc[i].array[j],acc[i+1].array[j],&jerk[i].array[j],&dummy);
    }
    totjerk=0.0;
    for (i=0;i<ptrpath->maxidx;i++)
    {
     totjerk+=jerk[i].array[j]*jerk[i].array[j];
    }
    if (totjerk<minjerk)
    {
     printf("BINGO!!! %i %0.4f %0.4f\n",j,minjerk,totjerk);
     minjerk=totjerk;
     best.array[j]=temp.array[j];
     best2.array[j]=temp2.array[j];
     best3.array[j]=temp3.array[j];

    }

    pos[maxi-1].array[j]=tmp.array[j];
    pos[maxi].array[j]=tmp2.array[j];
    pos[maxi+1].array[j]=tmp3.array[j];
   }

   pos[maxi-1].array[j]=best.array[j];
   pos[maxi].array[j]=best2.array[j];
   pos[maxi+1].array[j]=best3.array[j];
# 1511 "genscript.c"
  }
 }
 for (i=0;i<ptrpath->maxidx;i++)
 {
  tmpnComputeFKlogic(robot, pos[i].name.a, pos[i].name.b, pos[i].name.c, pos[i].name.d, pos[i].name.e, 0.0, tcpidx);
  ptrpath->keypoint[i].x=robot->m_worldPoint.x;
    ptrpath->keypoint[i].y=robot->m_worldPoint.y;
    ptrpath->keypoint[i].z=robot->m_worldPoint.z;
    ptrpath->keypoint[i].v=robot->m_worldPoint.v;
    ptrpath->keypoint[i].w=robot->m_worldPoint.w;
    ptrpath->keypoint[i].u=robot->m_worldPoint.u;
 }
 printf("\n------------------after--------------------------\n");
 vel[0].name.a=0.0;
 vel[0].name.b=0.0;
 vel[0].name.c=0.0;
 vel[0].name.d=0.0;
 vel[0].name.e=0.0;
 vel[ptrpath->maxidx-1].name.a=0.0;
 vel[ptrpath->maxidx-1].name.b=0.0;
 vel[ptrpath->maxidx-1].name.c=0.0;
 vel[ptrpath->maxidx-1].name.d=0.0;
 vel[ptrpath->maxidx-1].name.e=0.0;
 for (i=0;i<ptrpath->maxidx;i++)
 {
  tmpnComputeIK(robot,ptrpath->keypoint[i].x,ptrpath->keypoint[i].y,ptrpath->keypoint[i].z,ptrpath->keypoint[i].v,ptrpath->keypoint[i].w,ptrpath->keypoint[i].u,tcpidx);
  pos[i].name.a=robot->m_joint.a;
  pos[i].name.b=robot->m_joint.b;
  pos[i].name.c=robot->m_joint.c;
  pos[i].name.d=robot->m_joint.d;
  pos[i].name.e=robot->m_joint.e;
 }
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),pos[i-1].array[j],pos[i].array[j],pos[i+1].array[j],&vel[i].array[j],&dummy);
  }
 }
 acc[0].name.a=0.0;
 acc[0].name.b=0.0;
 acc[0].name.c=0.0;
 acc[0].name.d=0.0;
 acc[0].name.e=0.0;
 acc[ptrpath->maxidx-1].name.a=0.0;
 acc[ptrpath->maxidx-1].name.b=0.0;
 acc[ptrpath->maxidx-1].name.c=0.0;
 acc[ptrpath->maxidx-1].name.d=0.0;
 acc[ptrpath->maxidx-1].name.e=0.0;
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),vel[i-1].array[j],vel[i].array[j],vel[i+1].array[j],&acc[i].array[j],&dummy);
  }
 }
 jerk[0].name.a=0.0;
 jerk[0].name.b=0.0;
 jerk[0].name.c=0.0;
 jerk[0].name.d=0.0;
 jerk[0].name.e=0.0;
 jerk[ptrpath->maxidx-1].name.a=0.0;
 jerk[ptrpath->maxidx-1].name.b=0.0;
 jerk[ptrpath->maxidx-1].name.c=0.0;
 jerk[ptrpath->maxidx-1].name.d=0.0;
 jerk[ptrpath->maxidx-1].name.e=0.0;
 for (i=1;i<ptrpath->maxidx-1;i++)
 {
  for (j=0;j<5;j++)
  {
   VAD(tvar*(i-1),tvar*i,tvar*(i+1),acc[i-1].array[j],acc[i].array[j],acc[i+1].array[j],&jerk[i].array[j],&dummy);
  }
 }
 for (i=0;i<ptrpath->maxidx;i++)
 {
  printf("%0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f\n",i*tvar,pos[i].name.a,((vel[i].name.a)*(float)0.001),((acc[i].name.a)*(float)0.001),((jerk[i].name.a)*(float)0.001)*((jerk[i].name.a)*(float)0.001),pos[i].name.b,((vel[i].name.b)*(float)3.1415926535898/(float)180.0),((acc[i].name.b)*(float)3.1415926535898/(float)180.0),((jerk[i].name.b)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.b)*(float)3.1415926535898/(float)180.0),pos[i].name.c,((vel[i].name.c)*(float)3.1415926535898/(float)180.0),((acc[i].name.c)*(float)3.1415926535898/(float)180.0),((jerk[i].name.c)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.c)*(float)3.1415926535898/(float)180.0),pos[i].name.d,((vel[i].name.d)*(float)3.1415926535898/(float)180.0),((acc[i].name.d)*(float)3.1415926535898/(float)180.0),((jerk[i].name.d)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.d)*(float)3.1415926535898/(float)180.0),pos[i].name.e,((vel[i].name.e)*(float)3.1415926535898/(float)180.0),((acc[i].name.e)*(float)3.1415926535898/(float)180.0),((jerk[i].name.e)*(float)3.1415926535898/(float)180.0)*((jerk[i].name.e)*(float)3.1415926535898/(float)180.0));
 }
}


void convertToFrame(tmpnVector *wp, int fromIdx, tmpnKeyPoint *p, int toIdx, tmpnRobot *robot)
{
  wp->x = p->x+robot->m_frames.frame[fromIdx].x-robot->m_frames.frame[toIdx].x;
  wp->y = p->y+robot->m_frames.frame[fromIdx].y-robot->m_frames.frame[toIdx].y;
  wp->z = p->z+robot->m_frames.frame[fromIdx].z-robot->m_frames.frame[toIdx].z;
  wp->v = p->v+robot->m_frames.frame[fromIdx].v-robot->m_frames.frame[toIdx].v;
  wp->w = p->w+robot->m_frames.frame[fromIdx].w-robot->m_frames.frame[toIdx].w;
  wp->u = p->u+robot->m_frames.frame[fromIdx].u-robot->m_frames.frame[toIdx].u;
}

void convertToFrame_vectorstyle(tmpnVector *wp, tmpnFrame *fromF, tmpnVector *p, tmpnFrame *toF)
{
  wp->x = p->x+fromF->x-toF->x;
  wp->y = p->y+fromF->y-toF->y;
  wp->z = p->z+fromF->z-toF->z;
  wp->v = p->v+fromF->v-toF->v;
  wp->w = p->w+fromF->w-toF->w;
  wp->u = p->u+fromF->u-toF->u;
}

void blendCorner3(tmpnRobot *robot, COMMANDSTRUCT *corner)
{
  int frameIdx;
  tmpnVector wp0,wp1,wp2,wp3,wp4,wp5,wp6;
  tmpnVector distanceBetweenPoints;
  tmpnVector acc,V0,V1,f1,f2,f3;
  POINTSTRUCT *p0,*p1,*p2,*p3,*p4,*p5,*p6;
  float arczy4;

  p0=getPoint(corner,-3);
  p1=getPoint(corner,-2);
  p2=getPoint(corner,-1);
  p3=getPoint(corner,0);
  p4=getPoint(corner,1);
  p5=getPoint(corner,2);
  p6=getPoint(corner,3);

  frameIdx=getFrameIdx("base",robot);
  convertToFrame(&wp0,p0->frameidx,&p0->fp,frameIdx,robot);
  convertToFrame(&wp1,p1->frameidx,&p1->fp,frameIdx,robot);
  convertToFrame(&wp2,p2->frameidx,&p2->fp,frameIdx,robot);
  convertToFrame(&wp3,p3->frameidx,&p3->fp,frameIdx,robot);
  convertToFrame(&wp4,p4->frameidx,&p4->fp,frameIdx,robot);
  convertToFrame(&wp5,p5->frameidx,&p5->fp,frameIdx,robot);
  convertToFrame(&wp6,p6->frameidx,&p6->fp,frameIdx,robot);
  V0.x=wp1.x-wp0.x;
  V0.y=wp1.y-wp0.y;
  V0.z=wp1.z-wp0.z;
  V0.w=wp1.w-wp0.w;

  V1.y=wp6.y-wp5.y;
  V1.x=wp6.x-wp5.x;
  V1.z=wp6.z-wp5.z;
  V1.w=wp6.w-wp5.w;

  acc.x=0; if(fabs(V0.x)<=fabs(V1.x)) acc.x=1;
  acc.y=0; if(fabs(V0.y)<=fabs(V1.y)) acc.y=1;
  acc.z=0; if(fabs(V0.z)<=fabs(V1.z)) acc.z=1;
  acc.w=0; if(fabs(V0.w)<=fabs(V1.w)) acc.w=1;



  arczy4=3.1415926535898/8;

  if(acc.x==1)
  {
    f1.x=1-sin(arczy4*3);
    f2.x=1-sin(arczy4*2);
    f3.x=1-sin(arczy4*1);
  }
  else
  {
    f1.x=sin(arczy4*1);
    f2.x=sin(arczy4*2);
    f3.x=sin(arczy4*3);
  }

  if(acc.y==1)
  {
    f1.y=1-sin(arczy4*3);
    f2.y=1-sin(arczy4*2);
    f3.y=1-sin(arczy4*1);
  }
  else
  {
    f1.y=sin(arczy4*1);
    f2.y=sin(arczy4*2);
    f3.y=sin(arczy4*3);
  }


  if(acc.z==1)
  {
    f1.z=1-sin(arczy4*3);
    f2.z=1-sin(arczy4*2);
    f3.z=1-sin(arczy4*1);
  }
  else
  {
    f1.z=sin(arczy4*1);
    f2.z=sin(arczy4*2);
    f3.z=sin(arczy4*3);
  }

  if(acc.w==1)
  {
    f1.w=1-sin(arczy4*3);
    f2.w=1-sin(arczy4*2);
    f3.w=1-sin(arczy4*1);
  }
  else
  {
    f1.w=sin(arczy4*1);
    f2.w=sin(arczy4*2);
    f3.w=sin(arczy4*3);
  }

  distanceBetweenPoints.x=wp5.x-wp1.x;
  distanceBetweenPoints.y=wp5.y-wp1.y;
  distanceBetweenPoints.z=wp5.z-wp1.z;
  distanceBetweenPoints.w=wp5.w-wp1.w;

  p2->fp.x=wp1.x+f1.x*distanceBetweenPoints.x-robot->m_frames.frame[p2->frameidx].x;
  p3->fp.x=wp1.x+f2.x*distanceBetweenPoints.x-robot->m_frames.frame[p3->frameidx].x;
  p4->fp.x=wp1.x+f3.x*distanceBetweenPoints.x-robot->m_frames.frame[p4->frameidx].x;

  p2->fp.y=wp1.y+f1.y*distanceBetweenPoints.y-robot->m_frames.frame[p2->frameidx].y;
  p3->fp.y=wp1.y+f2.y*distanceBetweenPoints.y-robot->m_frames.frame[p3->frameidx].y;
  p4->fp.y=wp1.y+f3.y*distanceBetweenPoints.y-robot->m_frames.frame[p4->frameidx].y;

  p2->fp.z=wp1.z+f1.z*distanceBetweenPoints.z-robot->m_frames.frame[p2->frameidx].z;
  p3->fp.z=wp1.z+f2.z*distanceBetweenPoints.z-robot->m_frames.frame[p3->frameidx].z;
  p4->fp.z=wp1.z+f3.z*distanceBetweenPoints.z-robot->m_frames.frame[p4->frameidx].z;

  p2->fp.w=wp1.w+f1.w*distanceBetweenPoints.w-robot->m_frames.frame[p2->frameidx].w;
  p3->fp.w=wp1.w+f2.w*distanceBetweenPoints.w-robot->m_frames.frame[p3->frameidx].w;
  p4->fp.w=wp1.w+f3.w*distanceBetweenPoints.w-robot->m_frames.frame[p4->frameidx].w;
}

void seekCorner(tmpnRobot *robot, COMMANDSTRUCT *corner, float rx, float rz)
{
  POINTSTRUCT *p0;
  p0=getPoint(corner,-1);
  p0->fp.z+=rz*0.5;
  p0=getPoint(corner,-2);
  p0->fp.z+=rz;
  p0=getPoint(corner,-3);
  p0->fp.x+=rx*0.5;
  p0->fp.z+=rz;
  p0=getPoint(corner,-4);
  p0->fp.x+=rx;
  p0->fp.z+=rz;
  p0=getPoint(corner,-5);
  p0->fp.z+=rz*0.5;
  p0->fp.x+=rx;
  p0=getPoint(corner,-6);
  p0->fp.x+=rx;
  p0=getPoint(corner,-7);
  p0->fp.x+=rx;
  p0->fp.z-=rz*0.5;
  p0=getPoint(corner,-8);
  p0->fp.x+=rx;
  p0->fp.z-=rz;
  p0=getPoint(corner,-9);
  p0->fp.x+=rx*0.5;
  p0->fp.z-=rz;
  p0=getPoint(corner,-10);
  p0->fp.z-=rz;
  p0=getPoint(corner,-11);
  p0->fp.x-=rx*0.5;
  p0->fp.z-=rz;
  p0=getPoint(corner,-12);
  p0->fp.x-=rx;
  p0->fp.z-=rz;
  p0=getPoint(corner,-13);
  p0->fp.x-=rx;
  p0->fp.z-=rz*0.5;
  p0=getPoint(corner,-14);
  p0->fp.x-=rx;
  p0=getPoint(corner,-15);
  p0->fp.x-=rx;
  p0->fp.z+=rz*0.5;
  p0=getPoint(corner,-16);
  p0->fp.x-=rx;
  p0->fp.z+=rz;
  p0=getPoint(corner,-17);
  p0->fp.x-=rx*0.5;
  p0->fp.z+=rz;
  p0=getPoint(corner,-18);
  p0->fp.z+=rz;
  p0=getPoint(corner,-19);
  p0->fp.z+=rz*0.5;
}

void seekCornerX(tmpnRobot *robot, COMMANDSTRUCT *corner, float rzminus, float rzplus, float rxminus, float rxplus)
{
  POINTSTRUCT *p0;

  p0=getPoint(corner,-1);
  p0->fp.z-=rzminus*0.5;
  p0=getPoint(corner,-2);
  p0->fp.z-=rzminus;
  p0=getPoint(corner,-3);
  p0->fp.z-=rzminus*0.5;

  p0=getPoint(corner,-5);
  p0->fp.z+=rzplus*0.5;
  p0=getPoint(corner,-6);
  p0->fp.z+=rzplus;
  p0=getPoint(corner,-7);
  p0->fp.z+=rzplus*0.5;

  p0=getPoint(corner,-9);
  p0->fp.x-=rxminus*0.5;
  p0=getPoint(corner,-10);
  p0->fp.x-=rxminus;
  p0=getPoint(corner,-11);
  p0->fp.x-=rxminus*0.5;

  p0=getPoint(corner,-13);
  p0->fp.x+=rxplus*0.5;
  p0=getPoint(corner,-14);
  p0->fp.x+=rxplus;
  p0=getPoint(corner,-15);
  p0->fp.x+=rxplus*0.5;

}

COMMANDSTRUCT *expandPath(COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup)
{
  tmpnPPScript *ppscript;
  ppscript = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);
  if (ppscript==__null) {
   fprintf(stderr,"error: ppscript (%s) not found!\n",ppscriptname);
   exit(1);
  }
  if(ppscript->type==6)
    return expandSubPathKatrineIn((tmpnRobot*)trobot,ptrcmd,level,forceItem, ppscriptname,loadgroup);
  if(ppscript->type==7)
    return expandSubPathKatrineOut((tmpnRobot*)trobot,ptrcmd,level,forceItem, ppscriptname,loadgroup);


 if (ppscript->type%2==0)
 {
  return expandPathGeneralBoptInHeader((tmpnRobot*)trobot,ptrcmd,level,forceItem,ppscriptname,loadgroup);
 }
 else
 {
  return expandPathGeneralBoptOutHeader((tmpnRobot*)trobot,ptrcmd,level,forceItem,ppscriptname,loadgroup);
 }
 return __null;
}
# 1854 "genscript.c"
void expandBopt(tmpnRobot *robot, COMMANDSTRUCT* ptrcmd) {
  COMMANDSTRUCT* ppcmd=__null;
  const char *ppscriptname;
  tmpnPPScript *ppscript;
  int forceItem;
  int loadgroup;
 tmpnBoptCoeff* BoptCoeffs;
  PATHSTRUCT* ptrpath;

  ptrpath=(PATHSTRUCT*)ptrcmd->data;

  ppcmd = getPrevPPScriptCommand(ptrcmd);
  ppscriptname=((PPSCRIPTSTRUCT*)ppcmd->data)->name;

  forceItem = ((PPSCRIPTSTRUCT*)ppcmd->data)->idx;
  loadgroup = ((PPSCRIPTSTRUCT*)ppcmd->data)->loadgroup;
  ppscript = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);

 BoptCoeffs = getBoptCoeff((tmpnWorkcell*)tworkcell);
 if (BoptCoeffs == __null)
  printf("wrong type ppscript for runbopt!!\n");
 else
  expandPathBoptGeneral(robot,&ptrpath->tpathdef,forceItem,ppscriptname,loadgroup,BoptCoeffs);
}

COMMANDSTRUCT *generateProgram(COMMANDSTRUCT *ptrcmd
                              ,tmpnRobot *robot
                              ,int *level
                              ,int layerHeightMM
                              ,int forceLayer
                              ,const char *ppscriptname)
{
  tmpnPPScript *ppscript;
  ppscript = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);
  return __null;
}

COMMANDSTRUCT *expandPathGeneralBoptInHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup)
{
  char s[512];
  tmpnPPScriptItem *moveItem;
  tmpnPPScript *ppscriptA;
  ppscriptA = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);
  moveItem=&ppscriptA->item[forceItem];

  ptrcmd=addCommandString(ptrcmd,"COUNTER delaystop = 1",level);





  sprintf(s,"PATH bopt-pick-%s-%d id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1",moveItem->from,moveItem->idx,moveItem->idx,20,1000,loadgroup);
  ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);




  sprintf(s,"PATH bopt-place-%s-%d id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1", moveItem->to,moveItem->idx,moveItem->idx,21,1000,loadgroup);
  ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);


  ptrcmd=addCommandString(ptrcmd,"COUNTER cAItems += 1",level);





  sprintf(s,"PATH bopt-home id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1", moveItem->idx,22,1000,loadgroup);
  ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);


  ptrcmd=addCommandString(ptrcmd,"COUNTER delaystop = 0",level);
  return ptrcmd;
}

COMMANDSTRUCT *expandPathGeneralBoptOutHeader(tmpnRobot *robot, COMMANDSTRUCT *ptrcmd, int *level, int forceItem, const char *ppscriptname, int loadgroup)
{
  char s[512];
  tmpnPPScriptItem *moveItem;
  tmpnPPScript *ppscriptA;
  ppscriptA = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);
  moveItem=&ppscriptA->item[forceItem];

  ptrcmd=addCommandString(ptrcmd,"COUNTER delaystop = 1",level);




  sprintf(s,"PATH bopt-pick-%s-%d id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1",moveItem->from,moveItem->idx,moveItem->idx,23,1000,loadgroup);
 ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);





  sprintf(s,"PATH bopt-place-%s-%d id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1", moveItem->to,moveItem->idx,moveItem->idx,24,1000,loadgroup);
  ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);

  ptrcmd=addCommandString(ptrcmd,"COUNTER cBItems += 1",level);





  sprintf(s,"PATH bopt-home id=%d,type=%d,time=%d,loadgroup=%d,runbopt=1", moveItem->idx,25,1000,loadgroup);
  ptrcmd=addCommandString(ptrcmd,s,level);




  ptrcmd=addCommandString(ptrcmd,"END",level);


  ptrcmd=addCommandString(ptrcmd,"COUNTER delaystop = 0",level);
  return ptrcmd;
}
# 2007 "genscript.c"
void expandPathBoptGeneral(tmpnRobot *robot, tmpnPathDef *ptrpath, int forceItem, const char *ppscriptname, int loadgroup, tmpnBoptCoeff* BoptCoeffs)
{
  tmpnFrame *toFrame,*fromFrame,*homeFrame;
  tmpnPPScriptItem *moveItem;
  tmpnPPScript *ppscriptA;
  int maxlayers;
  int itemsPrLayer;
  ppscriptA = getPPScript(ppscriptname,(tmpnWorkcell*)tworkcell);
  maxlayers = ppscriptA->layers;
  itemsPrLayer = ppscriptA->itemsPrLayer;
  moveItem=&ppscriptA->item[forceItem];
 int layer = moveItem->layer;
 int pathidx = moveItem->idx;
 fromFrame=&robot->m_frames.frame[getFrameIdx(moveItem->from,robot)];
  toFrame=&robot->m_frames.frame[getFrameIdx(moveItem->to,robot)];
  homeFrame=&robot->m_frames.frame[getFrameIdx("home",robot)];

 if (ptrpath->pathtype==20)
 {
  expandPathBoptGeneric(robot,ptrpath,-1,layer,pathidx,homeFrame,fromFrame,__null,moveItem->item,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
 else if (ptrpath->pathtype==21)
 {
  expandPathBoptGeneric(robot,ptrpath,layer,-1,pathidx,fromFrame,toFrame,moveItem->item,moveItem->item,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
 else if (ptrpath->pathtype==22)
 {
  expandPathBoptGeneric(robot,ptrpath,-1,-1,pathidx,toFrame,homeFrame,moveItem->item,__null,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
 else if (ptrpath->pathtype==23)
 {
  expandPathBoptGeneric(robot,ptrpath,-1,-1,pathidx,homeFrame,fromFrame,__null,moveItem->item,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
 else if (ptrpath->pathtype==24)
 {
  expandPathBoptGeneric(robot,ptrpath,-1,layer,pathidx,fromFrame,toFrame,moveItem->item,moveItem->item,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
 else if (ptrpath->pathtype==25)
 {
  expandPathBoptGeneric(robot,ptrpath,layer,-1,pathidx,toFrame,homeFrame,moveItem->item,__null,loadgroup,ppscriptA->type,ptrpath->pathtype,BoptCoeffs);
 }
}

tmpnDualVector viavectpos1={0.00, 0.00, 0.00, 0.00, 0.00, 0.00};
tmpnVector viavecthast1={0.00, 0.00, 0.00, 0.00, 0.00, 0.00};
tmpnDualVector viavectpos2={0.00, 0.00, 0.00, 0.00, 0.00, 0.00};
tmpnVector viavecthast2={0.00, 0.00, 0.00, 0.00, 0.00, 0.00};
int viavectabs1[]={0, 0, 0, 0, 0, 0};
int viavectabs2[]={0, 0, 0, 0, 0, 0};
tmpnVector toVector,fromVector;
macroparamstruct startmacro;
macroparamstruct endmacro;

int expandPathBoptGeneric(
     tmpnRobot *robot
    ,tmpnPathDef *ptrpath
    ,int cALayer
    ,int cBLayer
    ,int pathidx
    ,tmpnFrame *fromFrame
    ,tmpnFrame *toFrame
    ,const char *startItem
    ,const char *endItem
    ,int loadgroup
    ,int boptMode
    ,int pathtype
    ,tmpnBoptCoeff* BoptCoeffs)
{
  tmpnItem *thisitemstart, *thisitemend;
 tmpnFrame baseFrame={"base",0.00,0.00,0.00,0.00,0.00,0.00};
  tmpnVector zero = {0,0,0,0,0,0};
 tmpnBoptCoeffItem* boptcoeff;
  if (fromFrame == __null || toFrame == __null) return 0;
 boptcoeff = getBoptCoeffItem(BoptCoeffs, boptMode, pathtype);
 if (boptcoeff==__null) return 0;
 ptrpath->pathtype=pathtype;

  int blendtype=boptcoeff->params.integer[1];

 float maxlength=boptcoeff->params.floating[4];
  float maxheight=boptcoeff->params.floating[0];
  float minheight=boptcoeff->params.floating[1];
 float lockv=boptcoeff->params.floating[5];

  convertToFrame_vectorstyle(&fromVector,fromFrame,&zero,&baseFrame);
  convertToFrame_vectorstyle(&toVector,toFrame,&zero,&baseFrame);


 thisitemstart = getItem(startItem,(tmpnWorkcell*)tworkcell);
 thisitemend = getItem(endItem,(tmpnWorkcell*)tworkcell);

  float b,f,p,g,l,h,t,r;

 if (thisitemstart!=__null)
 {
  if (pathtype==22||pathtype==25||pathtype==44)
   fromVector.y += thisitemstart->my;
  else
   fromVector.y += thisitemstart->gy;
  if (cALayer!=-1)
  {
   fromVector.y += cALayer*thisitemstart->sy;
  }
  if (pathtype==24||pathtype==43)
   fromVector.x -= thisitemstart->gx;
 }
 else
 {
  fromVector.y += cALayer;
 }
 if (thisitemend!=__null)
 {
  if (pathtype==20||pathtype==23)
   toVector.y += thisitemend->gy;
  else
   toVector.y += thisitemend->my;
  if (cBLayer !=-1)
  {
   toVector.y += cBLayer*thisitemend->sy;
  }
  if (pathtype==23||pathtype==44)
   toVector.x -= thisitemend->gx;
 }
 else
 {
  toVector.y += cBLayer;
 }
 b = (fromVector.y-minheight)/(maxheight-minheight);
 f = (1.0-b);
 g = (toVector.y-minheight)/(maxheight-minheight);
 p = (1.0-g);
 l = fabs(fromVector.z - toVector.z)/maxlength;
 h = fabs(toVector.y - fromVector.y)/(maxheight-minheight);
 t = fabs(toVector.v - fromVector.v)/180.0;
 r = (toVector.w - fromVector.w)/360.0;
 char noitemname[]="nothing";
 char *sitem;
 char *eitem;
 if (thisitemstart==__null)
  sitem=noitemname;
 else
  sitem=thisitemstart->name;
 if (thisitemend==__null)
  eitem=noitemname;
 else
  eitem=thisitemend->name;
  if(rs_param.path_debug>0) printf("Item is (%s , %s). adjusting with bfgplhtr(%f %f %f %f %f %f %f %f)\n",sitem,eitem,b,f,g,p,l,h,t,r);
# 2171 "genscript.c"
 if (boptcoeff->macro[0].integer[0]==0)
 {
  startmacro.type=0;
 }
 else if (boptcoeff->macro[0].integer[0]==1)
 {
  startmacro.type=1;
  startmacro.positionhint=boptcoeff->macro[0].integer[1];
  startmacro.length=boptcoeff->macro[0].floating[0];
  startmacro.time=boptcoeff->macro[0].floating[1]*(1-f*f*f)+0.4;
  startmacro.amplitude=boptcoeff->macro[0].floating[2]*(1-f*f*f*f);
  startmacro.offsx=boptcoeff->macro[0].floating[3];
  startmacro.offsz=b*boptcoeff->macro[0].floating[4];
  startmacro.frequency=boptcoeff->macro[0].floating[5];
 }
 else if (boptcoeff->macro[0].integer[0]==2)
 {
  startmacro.type=2;
  startmacro.positionhint=boptcoeff->macro[0].integer[1];
  startmacro.length=boptcoeff->macro[0].floating[0];
  startmacro.time=boptcoeff->macro[0].floating[1];
 }
 else if (boptcoeff->macro[0].integer[0]==4)
 {
  startmacro.type=4;
  startmacro.positionhint=boptcoeff->macro[0].integer[1];
  startmacro.length=boptcoeff->macro[0].floating[0];
  startmacro.time=boptcoeff->macro[0].floating[1];
 }
 else if (boptcoeff->macro[0].integer[0]==3)
 {
  startmacro.type=3;
  startmacro.positionhint=boptcoeff->macro[0].integer[1];
  startmacro.length=boptcoeff->macro[0].floating[0];
  startmacro.time=boptcoeff->macro[0].floating[1];
 }
 else if (boptcoeff->macro[0].integer[0]==5)
 {
  startmacro.type=5;
  startmacro.positionhint=boptcoeff->macro[0].integer[1];
  startmacro.length=boptcoeff->macro[0].floating[0];
  startmacro.time=boptcoeff->macro[0].floating[1];
 }
 if (boptcoeff->macro[1].integer[0]==0)
 {
  endmacro.type=0;
 }
 else if (boptcoeff->macro[1].integer[0]==1)
 {
  endmacro.type=1;
  endmacro.positionhint=boptcoeff->macro[1].integer[1];
  endmacro.length=boptcoeff->macro[1].floating[0];
  endmacro.time=boptcoeff->macro[1].floating[1]*(1-p*p*p)+0.4;
  endmacro.amplitude=boptcoeff->macro[1].floating[2]*(1-p*p*p*p);
  endmacro.offsx=boptcoeff->macro[1].floating[3];
  endmacro.offsz=g*boptcoeff->macro[1].floating[4];
  endmacro.frequency=boptcoeff->macro[1].floating[5];
 }
 else if (boptcoeff->macro[1].integer[0]==2)
 {
  endmacro.type=2;
  endmacro.positionhint=boptcoeff->macro[1].integer[1];
  endmacro.length=boptcoeff->macro[1].floating[0];
  endmacro.time=boptcoeff->macro[1].floating[1];
 }
 else if (boptcoeff->macro[1].integer[0]==4)
 {
  endmacro.type=4;
  endmacro.positionhint=boptcoeff->macro[1].integer[1];
  endmacro.length=boptcoeff->macro[1].floating[0];
  endmacro.time=boptcoeff->macro[1].floating[1];
 }
 else if (boptcoeff->macro[1].integer[0]==3)
 {
  endmacro.type=3;
  endmacro.positionhint=boptcoeff->macro[1].integer[1];
  endmacro.length=boptcoeff->macro[1].floating[0];
  endmacro.time=boptcoeff->macro[1].floating[1];
 }
 else if (boptcoeff->macro[1].integer[0]==5)
 {
  endmacro.type=5;
  endmacro.positionhint=boptcoeff->macro[1].integer[1];
  endmacro.length=boptcoeff->macro[1].floating[0];
  endmacro.time=boptcoeff->macro[1].floating[1];
 }

  float samplerate=boptcoeff->params.floating[2];

  tmpnJointsUnion mv;
 mv.name.a=((boptcoeff->mv[0])*(float)1000.0);
 mv.name.b=((boptcoeff->mv[1])*(float)180.0/(float)3.1415926535898);
 mv.name.c=((boptcoeff->mv[2])*(float)180.0/(float)3.1415926535898);
 mv.name.d=((boptcoeff->mv[3])*(float)180.0/(float)3.1415926535898);
 mv.name.e=((boptcoeff->mv[4])*(float)180.0/(float)3.1415926535898);
 tmpnJointsUnion ma;
 ma.name.a=((boptcoeff->ma[0])*(float)1000.0);
 ma.name.b=((boptcoeff->ma[1])*(float)180.0/(float)3.1415926535898);
 ma.name.c=((boptcoeff->ma[2])*(float)180.0/(float)3.1415926535898);
 ma.name.d=((boptcoeff->ma[3])*(float)180.0/(float)3.1415926535898);
 ma.name.e=((boptcoeff->ma[4])*(float)180.0/(float)3.1415926535898);


 tmpnBoptParamStruct *pvia[20];
 float valvia[20];
 float sum,factor;
 int i,j,k;

 pvia[0]=boptcoeff->viapos[0].x;
 pvia[1]=boptcoeff->viapos[0].y;
 pvia[2]=boptcoeff->viapos[0].z;
 pvia[3]=boptcoeff->viapos[0].v;
 pvia[4]=boptcoeff->viapos[0].w;
 pvia[5]=boptcoeff->viapos[1].x;
 pvia[6]=boptcoeff->viapos[1].y;
 pvia[7]=boptcoeff->viapos[1].z;
 pvia[8]=boptcoeff->viapos[1].v;
 pvia[9]=boptcoeff->viapos[1].w;
 pvia[10]=boptcoeff->viavel[0].x;
 pvia[11]=boptcoeff->viavel[0].y;
 pvia[12]=boptcoeff->viavel[0].z;
 pvia[13]=boptcoeff->viavel[0].v;
 pvia[14]=boptcoeff->viavel[0].w;
 pvia[15]=boptcoeff->viavel[1].x;
 pvia[16]=boptcoeff->viavel[1].y;
 pvia[17]=boptcoeff->viavel[1].z;
 pvia[18]=boptcoeff->viavel[1].v;
 pvia[19]=boptcoeff->viavel[1].w;

 for (k=0;k<20;k++)
 {
  sum=0.0;
  for (i=0;i<16;i++)
  {
   factor=pvia[k][i].value;
   if (factor!=0.0000)
   {
    for (j=0;j<pvia[k][i].numofparams;j++)
    {
     char tab = pvia[k][i].table[j];
     switch (tab)
     {
     case 'f':
      factor *= f;
      break;
     case 'b':
      factor *= b;
      break;
     case 'p':
      factor *= p;
      break;
     case 'g':
      factor *= g;
      break;
     case 'l':
      factor *= l;
      break;
     case 'h':
      factor *= h;
      break;
     case 't':
      factor *= t;
      break;
     case 'r':
      factor *= r;
      break;
     case 'c':
     default:
      break;
     }
    }
    sum += factor;
   }
  }
  valvia[k]=sum;
 }
 viavectpos1.x=valvia[0];
 viavectpos1.absx=boptcoeff->viapos[0].x[0].ABS;
 viavectpos1.y=valvia[1];
 viavectpos1.absy=boptcoeff->viapos[0].y[0].ABS;
 viavectpos1.z=valvia[2];
 viavectpos1.absz=boptcoeff->viapos[0].z[0].ABS;
 viavectpos1.v=valvia[3];
 viavectpos1.absv=boptcoeff->viapos[0].v[0].ABS;
 viavectpos1.w=valvia[4];
 viavectpos1.absw=boptcoeff->viapos[0].w[0].ABS;
 viavectpos2.x=valvia[5];
 viavectpos2.absx=boptcoeff->viapos[1].x[0].ABS;
 viavectpos2.y=valvia[6];
 viavectpos2.absy=boptcoeff->viapos[1].y[0].ABS;
 viavectpos2.z=valvia[7];
 viavectpos2.absz=boptcoeff->viapos[1].z[0].ABS;
 viavectpos2.v=valvia[8];
 viavectpos2.absv=boptcoeff->viapos[1].v[0].ABS;
 viavectpos2.w=valvia[9];
 viavectpos2.absw=boptcoeff->viapos[1].w[0].ABS;
 viavecthast1.x=valvia[10];
 viavecthast1.y=valvia[11];
 viavecthast1.z=valvia[12];
 viavecthast1.v=valvia[13];
 viavecthast1.w=valvia[14];
 viavecthast2.x=valvia[15];
 viavecthast2.y=valvia[16];
 viavecthast2.z=valvia[17];
 viavecthast2.v=valvia[18];
 viavecthast2.w=valvia[19];

 trajopt(robot, ptrpath, pathidx, pathtype, loadgroup, boptcoeff->viatype, samplerate, boptcoeff->params.integer[0], boptcoeff->params.integer[0] , &mv, &ma, &fromVector, &zero, &toVector, &zero, &viavectpos1, &viavecthast1 , &viavectpos2, &viavecthast2, &startmacro, &endmacro, blendtype,lockv);
 ptrpath->maxTime*=boptcoeff->params.floating[3];
 return 1;
}

int expandBoptLoader(tmpnRobot *robot, tmpnPathItem *path)
{
  tmpnPatternItem *fromPatternItem=__null;
  tmpnPatternItem *toPatternItem=__null;

  tmpnFrame *fromFrame=&path->handle.key.from.frame;
  tmpnFrame *toFrame=&path->handle.key.to.frame;




  int fromLayer=-1;
  int toLayer=-1;

  if(path->handle.key.from.pattern!=__null)
  {
    fromPatternItem=&path->handle.key.from.pattern->item[path->handle.key.from.cItem];
    fromLayer=fromPatternItem->layer;
  }

  if(path->handle.key.to.pattern!=__null)
  {
    toPatternItem=&path->handle.key.to.pattern->item[path->handle.key.to.cItem];
    toLayer=toPatternItem->layer;
  }

  return expandPathBoptGeneric(robot
                       ,&path->pathdef
                       ,-1
                       ,-1
                       ,0
                       ,fromFrame
                       ,toFrame
                       ,__null
                       ,__null
                       ,0
                       ,path->handle.key.mode
                       ,path->handle.key.type
                       ,getBoptCoeff((tmpnWorkcell*)tworkcell));
# 2436 "genscript.c"
}







void copyFramesFromSTMtoRobot(void);
COMMANDSTRUCT *generateProgramNS(COMMANDSTRUCT *ptrcmd
                                ,tmpnRobot *robot
                                ,int *level
                                ,int layerHeightMM
                                ,int forceLayer
                                ,const char *ppscriptnameA)
{
# 2462 "genscript.c"
  char s[256];
  int i,id=5100,iA,bagsPrLayer=7;
  float towerHight=400,difw;
  tmpnPPScriptItem *moveItem;
  tmpnPPScript *ppscriptA;
  int toFrameIdx,fromFrameIdx;
  tmpnFrame *toFrame,*fromFrame;
  int exectime;
  COMMANDSTRUCT *start0,*stop0,*corner0,*corner1,*corner2,*corner3,*corner4,*corner5;



  ppscriptA = getPPScript(ppscriptnameA,(tmpnWorkcell*)tworkcell);
  bagsPrLayer=ppscriptA->itemsPrLayer;

  sprintf(s,"SUB %s",ppscriptnameA);
  ptrcmd=addCommandString(ptrcmd,s,level);

  copyFramesFromSTMtoRobot();

  iA=forceLayer*bagsPrLayer;
  for(i=0;i<bagsPrLayer;i++)
  {
    moveItem=&ppscriptA->item[iA++];
    moveItem->wcp.y=layerHeightMM;
    fromFrameIdx=getFrameIdx(moveItem->from,robot);
    fromFrame=&robot->m_frames.frame[fromFrameIdx];
    toFrameIdx=getFrameIdx(moveItem->to,robot);
    toFrame=&robot->m_frames.frame[toFrameIdx];
    exectime = 3500 + layerHeightMM;
    if(moveItem->wcp.z<=400.0) exectime+=500;
    if(exectime<3500) exectime=3500;
    sprintf(s,"PATH %s-%s-%d-%d id=%d,type=%d,time=%d,loadgroup=2,runbopt=0",moveItem->from,moveItem->to,forceLayer,moveItem->idx,id++,13,exectime);
    ptrcmd=addCommandString(ptrcmd,s,level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      start0=ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);


      corner0=ptrcmd=convertsplit(ptrcmd,0,0,0,0,0,0,moveItem->from
                          ,500,((0)>=(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))?(0):(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))),0,0,moveItem->wcp.w*0.5,0,moveItem->from
                          ,robot,-1,level,moveItem->from,"case",1);

      corner1=ptrcmd=convertsplit(ptrcmd,500,((0)>=(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))?(0):(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))),0,0,moveItem->wcp.w*0.5,0,moveItem->from
                  ,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,robot,-1,level,moveItem->to,"case",1);

      corner2=ptrcmd=convertsplit(ptrcmd,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                            ,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                            ,robot,3,level,moveItem->to,"case",1);
      ptrcmd=addCommandString(ptrcmd,"POSITIONHINT 2",level);

      corner3=ptrcmd=convertsplit(ptrcmd,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,robot,3,level,moveItem->to,"case",1);

      corner4=ptrcmd=convertsplit(ptrcmd,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+200,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,robot,-1,level,moveItem->to,"case",1);

      corner5=ptrcmd=convertsplit(ptrcmd,moveItem->wcp.x,((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300,moveItem->wcp.z,0,moveItem->wcp.w,0,moveItem->to
                  ,550,((0)>=(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))?(0):(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))),0,0,moveItem->wcp.w*0.5,0,moveItem->from
                  ,robot,-1,level,moveItem->to,"case",1);

      stop0=ptrcmd=convertsplit(ptrcmd,550,((0)>=(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))?(0):(((((towerHight)>=(moveItem->wcp.y)?(towerHight):(moveItem->wcp.y))+300)+robot->m_frames.frame[(toFrameIdx)].y-robot->m_frames.frame[(fromFrameIdx)].y))),0,0,moveItem->wcp.w*0.5,0,moveItem->from
                  ,0,0,0,0,0,0,moveItem->from
                  ,robot,-1,level,moveItem->from,"case",0);
      stop0=ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
      ptrcmd=addCommandString(ptrcmd,"POINT conveyorB 0,0,0,0,0,0,10 case",level);
    ptrcmd=addCommandString(ptrcmd,"END",level);


    blendCorner3(robot,start0);
    blendCorner3(robot,corner0);
    blendCorner3(robot,corner1);
    blendCorner3(robot,corner3->next);
    blendCorner3(robot,corner4);
    blendCorner3(robot,corner5);
    blendCorner3(robot,stop0->prev);


    ((POINTSTRUCT*)start0->data)->fp.w+=(((POINTSTRUCT*)start0->next->data)->fp.w-((POINTSTRUCT*)start0->data)->fp.w)*0.33;

    difw=(((POINTSTRUCT*)corner0->next->data)->fp.w-((POINTSTRUCT*)corner0->data)->fp.w);
    ((POINTSTRUCT*)corner0->prev->data)->fp.w+=difw*0.15;
    ((POINTSTRUCT*)corner0->data)->fp.w+=difw*0.37;
    ((POINTSTRUCT*)corner0->next->data)->fp.w+=difw*0.15;

    difw=(((POINTSTRUCT*)corner1->prev->data)->fp.w-((POINTSTRUCT*)corner1->data)->fp.w);
    ((POINTSTRUCT*)corner1->prev->data)->fp.w+=difw*0.15;
    ((POINTSTRUCT*)corner1->data)->fp.w+=difw*0.57;
    ((POINTSTRUCT*)corner1->next->data)->fp.w+=difw*0.15;

    difw=(((POINTSTRUCT*)corner4->next->data)->fp.w-((POINTSTRUCT*)corner4->data)->fp.w);
    ((POINTSTRUCT*)corner4->prev->data)->fp.w+=difw*0.15;
    ((POINTSTRUCT*)corner4->data)->fp.w+=difw*0.57;
    ((POINTSTRUCT*)corner4->next->data)->fp.w+=difw*0.15;

    difw=(((POINTSTRUCT*)corner5->prev->data)->fp.w-((POINTSTRUCT*)corner5->data)->fp.w);
    ((POINTSTRUCT*)corner5->prev->data)->fp.w+=difw*0.15;
    ((POINTSTRUCT*)corner5->data)->fp.w+=difw*0.37;
    ((POINTSTRUCT*)corner5->next->data)->fp.w+=difw*0.15;

   ((POINTSTRUCT*)stop0->data)->fp.w+=(((POINTSTRUCT*)stop0->prev->data)->fp.w-((POINTSTRUCT*)stop0->data)->fp.w)*0.33;

   ((POINTSTRUCT*)stop0->prev->data)->fp.y+=10.0;
   ((POINTSTRUCT*)stop0->data)->fp.y+=20.0;
   ((POINTSTRUCT*)stop0->next->data)->fp.y+=10.0;
  }
  ptrcmd=addCommandString(ptrcmd,"END",level);
  return ptrcmd;
}
