STATEMACHINEVERSION 3
Include=casekind.statemachine
Name=CamGenLift
;** Input **
;** Output **
;** Link **
Link=PID PIDLift
Link=Master KasseStativ
Link=parent Parent
;** linkValue **
linkValue=encoder PID
linkValue=maxheight PID
linkValue=minheight PID
linkValue=poserr PID 
linkValue=casekind Program8XX
linkValue=firstRun WorkCell
linkValue=pidstaticmode staticmode PID
;** Table **
;** Item **
Item=item Netto
;** Const **
; 1024*gearudveksling/(eff_rad*2*pi)
; eks: 1024*10.3/(40*2*pi)
Const=tickspermm 41.965975394
; All posXX in mm.
Const=posHome 2.0000
Const=posTop 798
Const=posSend 290
Const=posStopFree 200
Const=nettoStabelmy 50.0000
Const=tMilli 7000
;** Value **
Value=posf 0.0
Value=stopFree 0
Value=beginpos 0.0
Value=endpos 0.0
Value=beginspeed 0.0
Value=endspeed 0.0
Value=tTime 2000000
Value=setpoint 0
Value=setspeed 0
Value=xtot 0.0
Value=curpm 0.0
Value=curpos 0.0
Value=curt 0
Value=temp 0
Value=ga 0.0
Value=gb 0.0
Value=gc 0.0
Value=gd 0.0
Value=tcpm 0.0
Value=millitot 0.0
Value=beginning 0
Value=testmode 0
Value=teststate 0
;** Timeout **
Timeout=ttot 5000000
Timeout=TimeWaitIdle 1000000
Timeout=TimeTest 5000000

State=ST_TIMER
END

State=ST_HALT
END

State=ST_IDLE
	TEST Master = ST_RESET
		SETSTATE ST_RESET
	ENDTEST
END

State=ST_RESET
  ;override ST_RESET in specific statemachine
  SETSTATE ST_IDLE2
END

State=ST_IDLE2
END

State=ST_NOCHOOSETRACK
	SET setpoint encoder
	TEST PID = ST_RUN
		SETSTATE ST_CHOOSETRACK
  ELSETEST PID = ST_WAIT_CAMGEN_IDLE
    SETSTATE ST_IDLE
	ENDTEST
END

State=ST_CHOOSETRACK
	SET beginspeed 0
	SET endspeed 0
  TEST PID = ST_RUN
  OR PID = ST_BRAKERELEASE_WAIT
  OR PID = ST_ENABLE_WAIT
    TEST Master = ST_WAIT_RECEIVE_POS
			SET beginpos setpoint
      SET endpos posHome
		  SETSTATE ST_PRESTART
    ELSE
      TEST Master = ST_WAIT_SEND_POS
			  SET beginpos setpoint
        SET endpos posSend
		    SETSTATE ST_PRESTART
      ELSE
        TEST Master = ST_WAIT_HOLD_POS
				  SET beginpos setpoint
				  TEST casekind = casekind_Netto
            ;netto
            CALC endpos = posTop - item.my
            CALC endpos = endpos - nettoStabelmy
				  ELSE
					  CALC endpos = posTop - item.my
					  CALC endpos = endpos - item.dy
				  ENDTEST
          SETSTATE ST_PRESTART
        ELSE
          TEST Master = ST_WAIT_RELEASE_POS
				    SET beginpos setpoint
            CALC endpos = posTop - item.my
            SETSTATE ST_PRESTART
          ELSE
            ;testmode: send -> release -> hold -> send -> ..
            TEST testmode = 1
              SET beginpos setpoint
					    TEST teststate = 0
						    SET teststate 1
						    SET endpos posSend
						    TIMEOUT TimeTest ST_PRESTART
						    SETSTATE ST_TIMER
					    ELSE
						    TEST teststate = 1
							    SET teststate 2
                  CALC endpos = posTop - item.my
							    TIMEOUT TimeTest ST_PRESTART
							    SETSTATE ST_TIMER
					      ELSE
						      TEST teststate = 2
							      SET teststate 0
                    CALC endpos = posTop - item.my
                    CALC endpos = endpos - nettoStabelmy
							      TIMEOUT TimeTest ST_PRESTART
							      SETSTATE ST_TIMER
						      ENDTEST
						    ENDTEST
					    ENDTEST
				    ENDTEST
          ENDTEST
        ENDTEST
			ENDTEST
		ENDTEST
		CALC endpos = endpos * tickspermm
	ELSE
		SET setspeed 0
		SETSTATE ST_NOCHOOSETRACK
  ENDTEST
  TEST Master = ST_IDLE
  AND testmode = 0
		TIMEOUT TimeWaitIdle ST_IDLE
		SETSTATE ST_TIMER
  ENDTEST
	TEST encoder < posf
		SET stopFree 1
	ELSE
		SET stopFree 0
	ENDTEST
END

State=ST_STOP
  SET curpm 1000.0
  SET setpoint endpos
	SET setspeed 0
  SETSTATE ST_CHOOSETRACK
	TEST encoder < posf
		SET stopFree 1
	ELSE
		SET stopFree 0
	ENDTEST
END

State=ST_PRESTART
  TEST pidstaticmode = 1
    SET beginning 1
    SETSTATE ST_START_WAIT
  ELSE
    TEST PID = ST_BRAKERELEASE_WAIT
      SETSTATE ST_START_WAIT2
    ELSE
      SETSTATE ST_START
    ENDTEST
  ENDTEST
END
  
State=ST_START_WAIT
  TEST PID = ST_BRAKERELEASE_WAIT
    SETSTATE ST_START_WAIT2
  ENDTEST
END

State=ST_START_WAIT2
  SET beginpos encoder
  SET setpoint beginpos
  TEST PID = ST_RUN
    SET beginning 0
    SETSTATE ST_START
  ENDTEST
END

State=ST_START
  SET beginpos encoder
	CALC tTime = endpos - beginpos
	TEST tTime < 0
		CALC tTime = tTime * -1
	ENDTEST
	CALC tTime = tTime * 1000
	CALC temp = maxheight - minheight
	CALC tTime = tTime / temp
	; tMilli = 2500 -> 2.5 s for hele bevægelsen
	CALC tTime = tTime * tMilli
	SET ttot tTime
  SET setpoint beginpos
	SET setspeed 0
  CALC xtot = endpos - beginpos
  SET curpm 0.0
  TEST xtot < 100.0
  AND xtot > -100.0
		SET setpoint endpos
	  SETSTATE ST_STOP
  ELSE
		TIMEOUT ttot ST_RUN
		SETSTATE ST_RUN
  ENDTEST
END

; Profile that accelerates more in beginning
State=ST_RUN
  SET curt ttot
  CALC curt = ttot - curt
	CALC millitot = ttot / 1000.0
	CALC curpm = curt / millitot
	CALC curpos = 2000.0 * beginpos
	CALC tcpm = curpm - 1000.0
	CALC ga = tcpm * tcpm
	CALC gb = 500.0 + curpm
	CALC ga = ga * gb
	CALC curpos = curpos * ga
	CALC ga = curpm - 1500.0
  CALC ga = ga * curpm
	CALC ga = ga * endpos
	CALC ga = ga * -2000.0
	CALC gb = tcpm * millitot
	CALC gc = tcpm * beginspeed
	CALC gd = curpm * endspeed
	CALC gc = gc + gd
	CALC gb = gb * gc
	CALC ga = ga + gb
	CALC ga = ga * curpm
	CALC curpos = curpos + ga
	CALC curpos = curpos / 1000000000000.0
	SET setpoint curpos
	; ved samplerate på ca. 126 Hz
  TEST ttot < 3800
    SETSTATE ST_STOP
  ENDTEST
	TEST encoder < posf
		SET stopFree 1
	ELSE
		SET stopFree 0
	ENDTEST
  ;skip stop state if something is wrong, e.g. follow error
  TEST PID != ST_RUN
		SETSTATE ST_IDLE
  ENDTEST
END
